<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<chapter>
  <title>Monitoring and Maintenance</title>

  <para>The section can be explained by describing about Audit and Logs</para>

  <section>
    <title>Audit</title>

    <para>As an administrator at a bank, admin can use the Audit to monitor
    actions carried out by users of <xi:include href="../entities_en.xml"
    xpointer="ent_appli" xmlns:xi="http://www.w3.org/2001/XInclude"/> in your
    bank . If user is the Bank Group administrator, you can monitor users of
    all the banks in your group and of their client companies. Particular
    role(bank_audit) should be added in order to enable audit module.</para>

    <para>The Audit can queried for the below by <xi:include
    href="../entities_en.xml" xpointer="ent_appli"
    xmlns:xi="http://www.w3.org/2001/XInclude"/> application</para>

    <para>Login: List all login and logout actions.Only Bank group admin can
    see unsuccessful logout actions too along with other actions.</para>

    <para>Products: List all actions regarding product transactions. For
    example, you can use this to audit submissions that failed because of
    jurisdiction problems, so you can consider modifying the amounts in
    authorisations.</para>

    <para>System Features: List all uses of System Features, including the
    Change Profile, Jurisdiction Maintenance, User Maintenance and Data
    Maintenance modules.</para>

    <para>Other: List all actions in the non-product-specific modules in
    <xi:include href="../entities_en.xml" xpointer="ent_appli"
    xmlns:xi="http://www.w3.org/2001/XInclude"/>: the Calendar and Customer
    Relationship Management modules.</para>

    <para>Audit level can be customized.</para>
  </section>

  <section>
    <title>Logs</title>

    <para>The logs can be of the following types and described below</para>

    <para>Turbine server logs: Turbine log file contain the core of
    <xi:include href="../entities_en.xml" xpointer="ent_appli"
    xmlns:xi="http://www.w3.org/2001/XInclude"/> logs which are generated by
    Turbine framework</para>

    <para>Scheduler logs: Scheduler log contains the logs for scheduler
    threads</para>

    <para>Profile logs: Profiler allows you to monitor and capture a record of
    the activity going on in your database. These activities are logged in
    these logs</para>

    <para>Audit Logs: The information related to Auditing gets logged in the
    audit logs</para>

    <para><xi:include href="../entities_en.xml" xpointer="ent_appli"
    xmlns:xi="http://www.w3.org/2001/XInclude"/> uses Log4j as logging
    framework and is customizable. Audit levels can be configured. For
    performance reason for production deployment audit delivery level should
    be kept at minimum level. The log file needs to be periodically purged to
    make sure sufficient free area available for log files.</para>

    <para>The logs can be customized according to the requirement as per log4j
    format . For more information please refer to
    http://logging.apache.org/log4j/1.2. The sample configuration is
    below.</para>

    <programlisting># ------------------------------------------------------------------------
#
# Logging Configuration
#
# ------------------------------------------------------------------------

#
# If we don't know the logging facility, put it into the
# turbine.log
# delivery level is ERROR.
log4j.rootLogger = INFO, turbine, console

#
# Torque has its own log file
#
log4j.logger.org.apache.torque = INFO, torque, console
log4j.additivity.org.apache.torque = false

#
# Velocity
#
log4j.logger.velocity = ERROR, console
log4j.additivity.velocity = false
#
# Scheduler Category
#
log4j.logger.scheduler = INFO, scheduler, console
log4j.additivity.scheduler = false

#
# Audit logger configuration
#
log4j.logger.gtpaudit = ERROR, gtpaudit, console
log4j.additivity.gtpaudit = false

#
# Interface Message logger configuration
#
log4j.logger.interfacemessage = INFO, interfacemessage, console
log4j.additivity.interfacemessage = false

#
# Profiler Category
#
log4j.logger.profiler = INFO, profiler, console
log4j.additivity.profiler = false

#
# Tools
#
log4j.logger.httpclient.wire = FATAL, turbine
log4j.additivity.httpclient.wire = false

log4j.logger.org.apache.commons.httpclient = FATAL, turbine
log4j.additivity.org.apache.commons.httpclient = false

#
# Loan IQ
#
log4j.logger.com.misys.portal.loan.services.LoanIQService = INFO, loaniq, console
log4j.additivity.com.misys.portal.loan.services.LoanIQService = false
log4j.logger.com.misys.portal.loan.services.DummyLoanIQService = DEBUG, loaniq, console
log4j.additivity.com.misys.portal.loan.services.DummyLoanIQService = false
log4j.logger.com.misys.portal.loaniq.daemon.impl.LoanIQEventsDaemon = DEBUG, loaniq, console
log4j.additivity.com.misys.portal.loaniq.daemon.impl.LoanIQEventsDaemon = false

#
# Node identification
#
log4j.logger.com.misys.portal.services.instanceid.DBInstanceIdentificationService = INFO, instanceId


#
# Axis / Axiom
#
log4j.logger.org.apache.axis2 = INFO, axis2
log4j.logger.org.apache.axiom = INFO, axis2

#
# Opics
#
log4j.logger.com.misys.portal.opics = DEBUG, console
log4j.additivity.com.misys.portal.opics = false

log4j.logger.com.misys.portal.report = INFO, console
log4j.additivity.com.misys.portal.report = false

#
# Password Migration Service
#
log4j.logger.com.misys.portal.services.db.PasswordMigrationService = DEBUG, passwordMigration

#
# Database Pool Debug
#
#log4j.logger.com.misys.portal.services.db.GTPDBPoolService = DEBUG, dbpool, console
#log4j.additivity.com.misys.portal.services.db.GTPDBPoolService = false
#log4j.appender.dbpool = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.dbpool.file = ${applicationRoot}/logs/gtp-dbpool.log
#log4j.appender.dbpool.layout = org.apache.log4j.PatternLayout
#log4j.appender.dbpool.layout.ConversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %m%n

#
# log4jdbc
#
#log4j.logger.jdbc.sqltiming = INFO, log4jdbc, console
#log4j.additivity.jdbc.sqltiming = false
#log4j.appender.log4jdbc = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.log4jdbc.file = ${applicationRoot}/logs/log4jdbc.log
#log4j.appender.log4jdbc.layout = org.apache.log4j.PatternLayout
#log4j.appender.log4jdbc.layout.conversionPattern = %m%n

#log4j.logger.jdbc.resultset = ERROR, console
#log4j.additivity.jdbc.resultset = false
#log4j.logger.jdbc.sqlonly = ERROR, console
#log4j.additivity.jdbc.sqlonly = false
#log4j.logger.jdbc.audit = ERROR, console
#log4j.additivity.jdbc.audit = false
#log4j.logger.jdbc.connection = ERROR, console
#log4j.additivity.jdbc.connection = false

########################################################################
#
# Logfile definitions
#
########################################################################

#
# Turbine
#
log4j.appender.turbine = org.apache.log4j.rolling.RollingFileAppender
log4j.appender.turbine.rollingPolicy = org.apache.log4j.rolling.TimeBasedRollingPolicy
log4j.appender.turbine.rollingPolicy.FileNamePattern = ${applicationRoot}/logs/%d{yyyy-MM-dd}/fcc-turbine_%d{yyyy-MM-dd-HHmmss}.log
log4j.appender.turbine.triggeringPolicy = org.apache.log4j.rolling.SizeBasedTriggeringPolicy
# maxFileSize in bytes (1 MB = 1048576 bytes)
log4j.appender.turbine.triggeringPolicy.maxFileSize = 10485760
log4j.appender.turbine.layout = org.apache.log4j.PatternLayout
log4j.appender.turbine.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %t -- %-5p -- %c - %m%n
#log4j.appender.turbine.DatePattern='.'yyyy-MM-dd

#
# Torque
# 
log4j.appender.torque = org.apache.log4j.rolling.RollingFileAppender
log4j.appender.torque.rollingPolicy = org.apache.log4j.rolling.TimeBasedRollingPolicy
log4j.appender.torque.rollingPolicy.FileNamePattern = ${applicationRoot}/logs/%d{yyyy-MM-dd}/fcc-torque.log
log4j.appender.torque.layout = org.apache.log4j.PatternLayout
log4j.appender.torque.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %t -- %-5p -- %c - %m%n

#
# Scheduler
#
log4j.appender.scheduler = org.apache.log4j.rolling.RollingFileAppender
log4j.appender.scheduler.rollingPolicy = org.apache.log4j.rolling.TimeBasedRollingPolicy
log4j.appender.scheduler.rollingPolicy.FileNamePattern = ${applicationRoot}/logs/%d{yyyy-MM-dd}/fcc-scheduler.log
log4j.appender.scheduler.layout = org.apache.log4j.PatternLayout
log4j.appender.scheduler.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %t -- %-5p -- %c - %m%n

#
# Audit
#
log4j.appender.gtpaudit = org.apache.log4j.rolling.RollingFileAppender
log4j.appender.gtpaudit.rollingPolicy = org.apache.log4j.rolling.TimeBasedRollingPolicy
log4j.appender.gtpaudit.rollingPolicy.FileNamePattern = ${applicationRoot}/logs/%d{yyyy-MM-dd}/fcc-audit.log
log4j.appender.gtpaudit.layout = org.apache.log4j.PatternLayout
log4j.appender.gtpaudit.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %t -- %-5p -- %c - %m%n

#
# Console
#
log4j.appender.console = org.apache.log4j.ConsoleAppender
log4j.appender.console.layout = org.apache.log4j.PatternLayout
log4j.appender.console.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %t -- %-5p -- %c - %m%n

#
# Performance
#
log4j.appender.profiler = org.apache.log4j.rolling.RollingFileAppender
log4j.appender.profiler.rollingPolicy = org.apache.log4j.rolling.TimeBasedRollingPolicy
log4j.appender.profiler.rollingPolicy.FileNamePattern = ${applicationRoot}/logs/%d{yyyy-MM-dd}/fcc-profiler.log
log4j.appender.profiler.layout = org.apache.log4j.PatternLayout
log4j.appender.profiler.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %t -- %-5p -- %c - %m%n

#
# Interface Message
#
log4j.appender.interfacemessage = org.apache.log4j.rolling.RollingFileAppender
log4j.appender.interfacemessage.rollingPolicy = org.apache.log4j.rolling.TimeBasedRollingPolicy
log4j.appender.interfacemessage.rollingPolicy.FileNamePattern = ${applicationRoot}/logs/%d{yyyy-MM-dd}/fcc-interfacemessage.log
log4j.appender.interfacemessage.layout = org.apache.log4j.PatternLayout
log4j.appender.interfacemessage.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %t -- %-5p -- %c - %m%n

#
# Loan IQ
#
log4j.appender.loaniq = org.apache.log4j.rolling.RollingFileAppender
log4j.appender.loaniq.rollingPolicy = org.apache.log4j.rolling.TimeBasedRollingPolicy
log4j.appender.loaniq.rollingPolicy.FileNamePattern = ${applicationRoot}/logs/%d{yyyy-MM-dd}/loaniq.log
log4j.appender.loaniq.layout = org.apache.log4j.PatternLayout
log4j.appender.loaniq.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %-5p -- %c - %m%n

#
# Axis
#
log4j.appender.axis2 = org.apache.log4j.rolling.RollingFileAppender
log4j.appender.axis2.rollingPolicy = org.apache.log4j.rolling.TimeBasedRollingPolicy
log4j.appender.axis2.rollingPolicy.FileNamePattern = ${applicationRoot}/logs/%d{yyyy-MM-dd}/axis2.log
log4j.appender.axis2.layout = org.apache.log4j.PatternLayout
log4j.appender.axis2.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %-5p -- %c - %m%n

#
# Instance Identification
#
log4j.appender.instanceId = org.apache.log4j.rolling.RollingFileAppender
log4j.appender.instanceId.rollingPolicy = org.apache.log4j.rolling.TimeBasedRollingPolicy
log4j.appender.instanceId.rollingPolicy.FileNamePattern = ${applicationRoot}/logs/%d{yyyy-MM-dd}/instanceId.log
log4j.appender.instanceId.layout = org.apache.log4j.PatternLayout
log4j.appender.instanceId.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %-5p -- %c - %m%n

#
# Password Migration Service
#
log4j.appender.passwordMigration = org.apache.log4j.rolling.RollingFileAppender
log4j.appender.passwordMigration.rollingPolicy = org.apache.log4j.rolling.TimeBasedRollingPolicy
log4j.appender.passwordMigration.rollingPolicy.FileNamePattern = ${applicationRoot}/logs/%d{yyyy-MM-dd}/passwordMigration.log
log4j.appender.passwordMigration.layout = org.apache.log4j.PatternLayout
log4j.appender.passwordMigration.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %-5p -- %c - %m%n

######
# Interface Daemon logging 
######
#log4j.logger.com.misys.portal.core.daemon.impl.JMSToPortalInterfaceDaemon = ERROR, interfacedaemon
#log4j.additivity.com.misys.portal.core.daemon.impl.JMSToPortalInterfaceDaemon = false
#log4j.appender.interfacedaemon = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.interfacedaemon.file = ${applicationRoot}/logs/interfacedaemon.log
#log4j.appender.interfacedaemon.layout = org.apache.log4j.PatternLayout
#log4j.appender.interfacedaemon.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %-5p -- %c - %m%n
#log4j.appender.interfacedaemon.DatePattern ='.'yyyy-MM-dd
######

######
# Scheduler Daemon logging 
######
#log4j.logger.com.misys.portal.common.services.schedule.GTPJobEntry = ERROR, schedulerdaemon
#log4j.additivity.com.misys.portal.common.services.schedule.GTPJobEntry = false
#log4j.appender.schedulerdaemon = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.schedulerdaemon.file = ${applicationRoot}/logs/schedulerdaemon.log
#log4j.appender.schedulerdaemon.layout = org.apache.log4j.PatternLayout
#log4j.appender.schedulerdaemon.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %-5p -- %c - %m%n
#log4j.appender.schedulerdaemon.DatePattern ='.'yyyy-MM-dd
######

######
# ParameterData logging - enabling below related property will redirect LOGs to separated file.
######
#log4j.logger.com.misys.portal.common.tools.ParameterData = INFO, parameterdatalog
#log4j.additivity.com.misys.portal.common.tools.ParameterData = false
#log4j.appender.parameterdatalog = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.parameterdatalog.file = ${applicationRoot}/logs/parameterdatalog.log
#log4j.appender.parameterdatalog.layout = org.apache.log4j.PatternLayout
#log4j.appender.parameterdatalog.layout.conversionPattern = [%d{E MMM dd HH:mm:ss z}] -- %-5p -- %c - %m%n
#log4j.appender.parameterdatalog.DatePattern ='.'yyyy-MM-dd
######

</programlisting>

    <section>
      <title>Standard Application Level Error and Exceptions Registered in the
      Logs</title>

      <para>The following table lists the details for exceptions logged in the
      turbine log file.</para>

      <informaltable>
        <tgroup cols="4">
          <colspec colname="c1" colwidth="6*"/>

          <colspec colname="c2" colwidth="3.1*"/>

          <colspec colname="c3" colwidth="3.4*"/>

          <colspec colname="c4" colwidth="2.4*"/>

          <thead>
            <row>
              <entry valign="top"><para>Exception</para></entry>

              <entry valign="top"><para>Scenario</para></entry>

              <entry valign="top"><para><xi:include href="../entities_en.xml"
              xpointer="ent_appli"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>
              Behaviour</para></entry>

              <entry valign="top"><para>User Action</para></entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry valign="top"><para>javax.jms.JMSException </para></entry>

              <entry valign="top"><para>When the MQ is down, and the user
              processes a transaction in <xi:include href="../entities_en.xml"
              xpointer="ent_appli"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>, the transaction
              will not reach the back-office. </para></entry>

              <entry valign="top"><para>In the turbine.log file, a
              JMSException is logged with the message "The ref_ID:xxxxxxxxx
              And tnx_id :yyyyyyyy Failed due to {Failure Reason (Which
              contains the errorcode:errormessage)}"</para><para>The same
              transaction is stored and will be processed later with the
              daemon thread. </para></entry>

              <entry valign="top"><para>Support staff will check whether MQ is
              down. If it is, necessary steps will be taken to bring it
              up.</para></entry>
            </row>

            <row>
              <entry valign="top"><para>javax.naming.NamingException
              </para></entry>

              <entry valign="top"><para>When a transaction is initiated in
              <xi:include href="../entities_en.xml" xpointer="ent_appli"
              xmlns:xi="http://www.w3.org/2001/XInclude"/> and a Queue name is
              wrongly configured in retro_interfaces.xml. </para></entry>

              <entry valign="top"><para>In the turbine.log file
              NamingException is logged with the message "The ref_ID:xxxxxxxxx
              And tnx_id :yyyyyyyy Failed due to {Failure Reason (Which
              contains the errormessage)}"</para><para>The same transaction is
              stored and will be processed later with the daemon thread.
              </para></entry>

              <entry valign="top"><para>Support Staff will check whether the
              queue name is configured correctly in retro_interfaces.xml.
              </para></entry>
            </row>

            <row>
              <entry valign="top"><para>org.apache.torque.TorqueException
              </para></entry>

              <entry valign="top"><para>When the <xi:include
              href="../entities_en.xml" xpointer="ent_appli"
              xmlns:xi="http://www.w3.org/2001/XInclude"/> database is down
              and it is trying to connect. </para></entry>

              <entry valign="top"><para>In <xi:include
              href="../entities_en.xml" xpointer="ent_appli"
              xmlns:xi="http://www.w3.org/2001/XInclude"/>, unable to login.
              </para></entry>

              <entry valign="top"><para>Support staff will check database
              connectivity. </para></entry>
            </row>

            <row>
              <entry
              valign="top"><para>org.apache.commons.dbcp.SQLNestedException
              </para></entry>

              <entry valign="top"><para>When <xi:include
              href="../entities_en.xml" xpointer="ent_appli"
              xmlns:xi="http://www.w3.org/2001/XInclude"/> is running and the
              database is down or disconnected. </para></entry>

              <entry valign="top"><para>If users are logged in, they will be
              logged. out from the portal. In turbine.log
              org.apache.torque.TorqueException:
              org.apache.commons.dbcp.SQLNestedException: Could not retrieve
              connection info from pool get logged. </para></entry>

              <entry valign="top"><para>Support staff will check database
              connectivity. </para></entry>
            </row>

            <row>
              <entry
              valign="top"><para>javax.xml.transform.TransformerException
              </para></entry>

              <entry valign="top"><para>When TI or Back Office pushes the
              message to portal, if the xml is not well formed. Transaction
              has not reached to portal. </para></entry>

              <entry valign="top"><para>Portal side will configure a directory
              name in portal.properties
              daemon.filetogtpinterfacedaemon.error.directory. After the
              exception failed xml is stored in configured error directory.
              </para></entry>

              <entry valign="top"><para>Support staff will check the
              exception, if the exception present needs to check the xml file
              and reinitiate the transaction. </para></entry>
            </row>

            <row>
              <entry valign="top"><para>org.apache.commons.mail.EmailException
              </para></entry>

              <entry valign="top"><para>Mail is not sent. </para></entry>

              <entry valign="top"><para>When SMTP server is down and tries to
              send mail from portal application then SAXException is logged in
              turbine.log </para></entry>

              <entry valign="top"><para>Support stall will check with SMTP
              server </para></entry>
            </row>

            <row>
              <entry valign="top"><para>GTPException </para></entry>

              <entry valign="top"><para>Most of the Exception occurring during
              application usages will be wrapped as GTPException.
              </para></entry>

              <entry valign="top"><para>Portal encapsulates the application
              exception to a common exception - GTPException and throws-up the
              exception hierarchy for application level exception management.
              For example if some mandatory fields are null during validation
              such as "userId is empty" then it is wrapped-up in GTPException
              along with the user understandable message depending on the
              business logic. </para><para>Similarly if there are any other
              checked-exception or un-checked exception like such as
              IOException, SAXException, SQLException, Exception, it is
              encapsulated and wrapped as GTPException. </para></entry>

              <entry valign="top"><para>Check the underneath error and take
              corrective actions </para></entry>
            </row>

            <row>
              <entry valign="top"><para>java.lang.OutOfMemoryError
              </para></entry>

              <entry valign="top"><para>JVM run-time environment is short of
              memory. </para></entry>

              <entry valign="top"><para>Memory Error </para></entry>

              <entry valign="top"><para>Restart the server. </para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
  </section>

  <section id="TransactionArchival">
    <title id="TransactionArchival">Transaction Archival</title>

    <para>The normal operational activity in banks and financial institutions
    generate large amounts of data, resulting in a rapid increase in the size
    of databases. This not only impacts system performance, but also
    significantly increases data maintenance costs.</para>

    <para>Finastra recommends you to include the data archival process as part
    of database housekeeping activity. For more information on Fusion
    Corporate Channels database schema details, see Fusion Corporate Channels
    Technical Reference Guide. For archival, consider the following
    tables:<programlisting>GTP_AUDIT
GTP_AUDIT_ITEM
GTP_PRODUCT_BANK
GTP_PRODUCT_BANK_TNX
GTP_PRODUCT_OBJECTDATA
GTP_PRODUCT_OBJECTDATA_TNX
GTP_PRODUCT_COUNTERPARTY
GTP_PRODUCT_COUNTERPARTY_TNX
GTP_ATTACHMENT_TNX
GTP_PRODUCT_CHARGE
GTP_PRODUCT_CHARGE_TNX
GTP_PRODUCT_AUTHORISER_TNX
GTP_PRODUCT_CROSS_REF
GTP_PRODUCT_CROSS_REF_TNX
GTP_PRODUCT_&lt;productcode&gt;_TNX
GTP_PRODUCT_&lt;productcode&gt; where, &lt;productcode&gt; indicates the product. For example, 

GTP_PRODUCT_LC_TNX
GTP_PRODUCT_LC
GTP_PRODUCT_FT_TNX
GTP_PRODUCT_FT
</programlisting></para>
  </section>
</chapter>
