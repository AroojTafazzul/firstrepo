<?xml version="1.0" encoding="UTF-8"?>
<!--
##########################################################
Templates for : TO DO : CANCEL + PASSBACK ENTITY

 Company Screen, System Form.

Copyright (c) 2000-2008 Misys (http://www.misys.com),
All Rights Reserved. 

version:   1.0
date:      12/03/08
author:    Laure Blin
##########################################################
-->
<!DOCTYPE xsl:stylesheet [
  <!ENTITY nbsp "&#160;">
]>
<xsl:stylesheet 
		version="1.0" 
		xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
		xmlns:localization="xalan://com.misys.portal.common.localization.Localization"
		xmlns:securitycheck="xalan://com.misys.portal.common.security.GTPSecurityCheck"
		xmlns:jetspeedresources="xalan://com.misys.portal.core.util.JetspeedResources"
		xmlns:utils="xalan://com.misys.portal.common.tools.Utils"
		xmlns:defaultresource="xalan://com.misys.portal.common.resources.DefaultResourceProvider"
		exclude-result-prefixes="localization securitycheck utils defaultresource jetspeedresources">
 
  <!-- 
   Global Parameters.
   These are used in the imported XSL, and to set global params in the JS 
  -->
  <xsl:param name="language">en</xsl:param>
  <xsl:param name="languages"/>
  <xsl:param name="nextscreen"/>
  <xsl:param name="option"/>
  <xsl:param name="action"/>
  <xsl:param name="token"/>
  <xsl:param name="password_mimimum_length"/><!-- password policy -->
  <xsl:param name="password_maximum_length"/>
  <xsl:param name="password_charset"/>
  <xsl:param name="password_autogenerated"/>
  <xsl:param name="email_required"/>
  <xsl:param name="password_display_disabled">false</xsl:param>
  <xsl:param name="displaymode">edit</xsl:param>
  <xsl:param name="collaborationmode">none</xsl:param> <!-- set to none, counterparty or bank, depending on whether we are in a collab summary screen  -->
  <xsl:param name="main-form-name">fakeform1</xsl:param>
  <xsl:param name="operation">SAVE_FEATURES</xsl:param>
  <xsl:param name="companyType"/>
  <xsl:param name="processdttm"/>
  <xsl:param name="isCounterparty">false</xsl:param>
  <xsl:param name="userAccountValidationEnabled">false</xsl:param>
  <xsl:param name="userAccountValidationRegex">^[a-zA-Z0-9 ]*$</xsl:param>
  <xsl:param name="isMultiBank"/>
  <xsl:param name="mode"/>
  <xsl:param name="images_path"><xsl:value-of select="$contextPath"/>/content/images/</xsl:param>
  <xsl:param name="editImage"><xsl:value-of select="$images_path"/>edit.png</xsl:param>
  <xsl:param name="deleteImage"><xsl:value-of select="$images_path"/>delete.png</xsl:param>
  <xsl:param name="actionDownImage"><xsl:value-of select="$images_path"/>action-down.png</xsl:param>
  <xsl:param name="actionUpImage"><xsl:value-of select="$images_path"/>action-up.png</xsl:param>
  <xsl:param name="liqDetails"/>
  <xsl:param name="liquidityEnabled"/>
  <xsl:variable name="cashUnificationEnabled"><xsl:value-of select="defaultresource:getResource('CASH_UNIFICATION')"/></xsl:variable>
  
  <!-- Global Imports. -->
  <xsl:include href="../../../core/xsl/common/system_common.xsl" />
  <xsl:include href="../../../core/xsl/system/sy_jurisdiction.xsl" />
  <xsl:include href="../../../core/xsl/common/maker_checker_common.xsl" />
  <xsl:include href="../../../core/xsl/common/attachment_templates.xsl" />
  
  <xsl:output method="html" version="4.01" indent="no" encoding="UTF-8" omit-xml-declaration="yes" />
  <xsl:template match="/">
   <xsl:apply-templates select="static_company"/>
  </xsl:template>
  
  <xsl:template match="static_company">
  <xsl:variable name="bank"><xsl:value-of select="//static_company/bank"/></xsl:variable>
  	<script>
   dojo.ready(function(){
  		misys._config = misys._config || {};
  		misys._config.attachedBanks = [];
  		misys._config.custRefPerBank = {};
  		misys._config.isOpenDialog = false;
  		misys._config.userAccountValidationEnabled = '<xsl:value-of select="defaultresource:getResource('USER_ACCOUNTNUMBER_VALIDATION_ENABLED')"></xsl:value-of>';
  		misys._config.userAccountValidationRegex = '<xsl:value-of select="defaultresource:getResource('USER_ACCCOUNTNUMBER_VALIDATION_REGEX')"></xsl:value-of>';
  		dojo.mixin(misys._config, {
  			accountTypesPerBank : {
	    			<xsl:if test="count(/static_company/account_type_per_banks) > 0" >
		        		<xsl:for-each select="/static_company/account_type_per_banks/account_type_per_bank/bank_abbv_name" >
		        			<xsl:variable name="bankAbbvName" select="self::node()/text()" />
	   						"<xsl:value-of select="."/>": [
		   						<xsl:for-each select="/static_company/account_type_per_banks/account_type_per_bank[bank_abbv_name=$bankAbbvName]/account_types" >
		   						<xsl:if test="bank_account_type != ''">
		   							{ value:"<xsl:value-of select="bank_account_type"/>",
				         				name:"<xsl:value-of select="bank_account_type"/>"},
				         		</xsl:if>
		   						</xsl:for-each>
	   								]<xsl:if test="not(position()=last())">,</xsl:if>
		         		</xsl:for-each>
	         		</xsl:if>
				},
				<!-- this object contains all the sweeping(FCM) fields -->
				liquidityFileds:{fields:["structuretype", "executiontype", "eventtriggertype", "accounts","entitytype","multibank", "interaccounttrack", "nonlive", "crossborder", "multicurrency", "currency", "activity","sweepback"]},
				bankCustomerReference:{
					<xsl:if test="count(/static_company/bank_liquidity/bank)>0">
						<xsl:for-each select="/static_company/bank_liquidity/bank">
							<xsl:variable name="bankName" select="./bank_name"/>
							"<xsl:value-of select="./bank_name"/>":[
								<xsl:for-each select="/static_company/bank_liquidity/bank[bank_name=$bankName]/reference">
									{name:"<xsl:value-of select="./reference_name"/>",
									value:"<xsl:value-of select="./reference_name"/>"},
								</xsl:for-each>
							]<xsl:if test="not(position()=last())">,</xsl:if>
						</xsl:for-each>
					</xsl:if>
				},
				customerAccountTypesPerBank : {
	    			<xsl:if test="count(/static_company/customer_account_types_per_bank) > 0" >
		        		<xsl:for-each select="/static_company/customer_account_types_per_bank/customer_account_type_per_bank/bank" >
		        			<xsl:variable name="bankAbbvName" select="self::node()/text()" />
	   						"<xsl:value-of select="."/>": [
		   						<xsl:for-each select="/static_company/customer_account_types_per_bank/customer_account_type_per_bank[bank=$bankAbbvName]/customer_account_types" >
		   						<xsl:if test="customer_account_type != ''">
		   							{ value:"<xsl:value-of select="customer_account_type"/>",
				         				name:"<xsl:value-of select="customer_account_type"/>"},
				         		</xsl:if>
		   						</xsl:for-each>
	   								]<xsl:if test="not(position()=last())">,</xsl:if>
		         		</xsl:for-each>
	         		</xsl:if>
				},
				productTypesPerBank : {
	    			<xsl:if test="count(/static_company/account_type_per_banks) > 0" >
		        		<xsl:for-each select="/static_company/account_type_per_banks/account_type_per_bank/bank_abbv_name" >
		        			<xsl:variable name="bankAbbvName" select="self::node()/text()" />
	   						"<xsl:value-of select="."/>": [
		   						<xsl:for-each select="/static_company/account_type_per_banks/account_type_per_bank[bank_abbv_name=$bankAbbvName]/account_types" >
		   						<xsl:if test="account_product_type != ''">
		   							{ value:"<xsl:value-of select="account_product_type"/>",
				         				name:"<xsl:value-of select="account_product_type"/>"},
				         		</xsl:if>
		   						</xsl:for-each>
	   								]<xsl:if test="not(position()=last())">,</xsl:if>
		         		</xsl:for-each>
	         		</xsl:if>
				}
			});
   		});
   		
  </script>
   <!-- Loading message  -->
   <xsl:call-template name="loading-message"/>

	<div>
    <xsl:attribute name="id"><xsl:value-of select="$displaymode"/></xsl:attribute>
    
    <!-- Form #0 : Main Form -->
    <xsl:call-template name="form-wrapper">
     <xsl:with-param name="name" select="$main-form-name"/>
     <xsl:with-param name="validating">Y</xsl:with-param>
     <xsl:with-param name="content">
      <xsl:call-template name="hidden-fields"/>
      <xsl:call-template name="display-dates"></xsl:call-template>
      <!-- Template in "system_common.xsl": same template as "sy_company.xsl" 
 		To deal with Main details (Tabs for SWIFT and POSTAL address -->
 	   <xsl:call-template name="main-details">
 	  	<xsl:with-param name="addressMandatory">N</xsl:with-param>
 	  	<xsl:with-param name="addressFieldExtended"><xsl:value-of select="defaultresource:getResource('CUSTOMER_ADDRESSFIELD_DISPLAY_EXTENDED')"/></xsl:with-param>
 	  </xsl:call-template> 
      <!-- Template in "system_common.xsl": To deal with the password part -->
      
      <xsl:call-template name="control-settings">
      	<xsl:with-param name="is-counterparty"><xsl:value-of select="$isCounterparty"/></xsl:with-param>
      </xsl:call-template>
 	  <!--
 	  <xsl:if test="$isMakerCheckerMode=false">
 	  	<xsl:call-template name="initial-admin-password"/>
 	  </xsl:if>
 	  -->
 	  <!-- 
 	  <xsl:call-template name="initial-admin-password">
 	  	<xsl:with-param name="password_autogenerated"><xsl:value-of select="$password_autogenerated"/></xsl:with-param>
 	  </xsl:call-template>
 	  -->
 	  <xsl:if test="$password_autogenerated='true' or $password_display_disabled='true'">
 	  	<xsl:call-template name="initial-admin-password">
 	  		<xsl:with-param name="password_autogenerated"><xsl:value-of select="$password_autogenerated"/></xsl:with-param>
 	  	</xsl:call-template>
 	  </xsl:if>
	  
      <xsl:call-template name="company-prefs">
		<xsl:with-param name="is-counterparty"><xsl:value-of select="$isCounterparty"/></xsl:with-param>
      </xsl:call-template>
      <xsl:call-template name="company-other-details">
      	<xsl:with-param name="is-counterparty"><xsl:value-of select="$isCounterparty"></xsl:value-of></xsl:with-param>
      </xsl:call-template>      
      <div>
	      <xsl:if test="$isCounterparty = 'true'">
	      	<xsl:attribute name="style">display:none</xsl:attribute>
	      </xsl:if>
<!-- 	    <xsl:if test="$companyType != '02'">
 -->    		<xsl:call-template name="account-details"/>
<!--     	</xsl:if>
 -->      </div>
      <!-- Display Accounts section at customer profile level -->
     
      <!--Display system settings -->     
       	<xsl:call-template name="system-settings">
       		<xsl:with-param name="is-counterparty"><xsl:value-of select="$isCounterparty"/></xsl:with-param>
       	</xsl:call-template>
      <!-- End -->
      
      <!-- Liquidity Settings -->
      <xsl:if test="securitycheck:hasPermission($rundata,'liquidity_setting_access') and $isCounterparty != 'true'">
      	<xsl:call-template name="liquidity-settings"/>
       </xsl:if>
       	<xsl:if test="defaultresource:getResource('LIQUIDITY_BACK_OFFICE_KTP') ='false' and $liquidityEnabled='Y'">
       	<xsl:call-template name="pooling-features"/>
       	</xsl:if>
       <xsl:call-template name="company-roles"/>
       <xsl:if test="entity_role_access[.='Y'] and $isCounterparty != 'true'">
     	  <xsl:call-template name="entity-roles"/>
      </xsl:if>
      
      <!-- <xsl:if test="$companyType='02'">
       <xsl:call-template name="bankcompany-details"/>
      </xsl:if> -->
       
      <!--  Display common menu. -->
      <xsl:if test="$canCheckerReturnComments = 'true'">
      	<xsl:call-template name="comments-for-return-mc">
      		<xsl:with-param name="value"><xsl:value-of select="static_company/return_comments"/></xsl:with-param>
      	</xsl:call-template>
      </xsl:if>
      <xsl:call-template name="maker-checker-menu"/>
      
     </xsl:with-param>
    </xsl:call-template>
    <xsl:call-template name="realform"/>
    <xsl:call-template name="account-dialog-template"/>
   </div>
   <script>
     dojo.ready(function(){
  		misys._config = misys._config || {};
  		dojo.mixin(misys._config, {
		  		bankAccountTypeMapping: {
		  			<xsl:for-each select="/static_company/account_types">
							<xsl:variable name="account_type_mapping"><xsl:value-of select="account_type_mapping"/></xsl:variable>
		         			<xsl:variable name="account_type_description"><xsl:value-of select="account_type_description"/></xsl:variable>
							"<xsl:value-of select="$account_type_mapping"/>":{
							"accountTypeMapping":"<xsl:value-of select="$account_type_mapping"/>",
							"accountDescription":"<xsl:value-of select="$account_type_description"/>"
								},
						</xsl:for-each>
						 "*":{}
					},
					perBankAccountProductTypeMappingDesc: {
		  			<xsl:for-each select="/static_company/account_type_per_banks/account_type_per_bank/account_types">
							<xsl:variable name="account_type_mapping"><xsl:value-of select="account_type_mapping"/></xsl:variable>
		         			<xsl:variable name="account_type_description"><xsl:value-of select="account_type_description"/></xsl:variable>
							"<xsl:value-of select="$account_type_mapping"/>":{
							"accountTypeMapping":"<xsl:value-of select="$account_type_mapping"/>",
							"accountDescription":"<xsl:value-of select="$account_type_description"/>"
								},
						</xsl:for-each>
						 "*":{}
					},
					
			duplicateCustomerReference: {
                        <xsl:for-each select="/static_company/back_office_duplicate_reference">
                        "<xsl:value-of select="back_office"/>":{
                        "duplicate_allowed":"<xsl:value-of select="duplicate_allowed"/>"
	                        },
	                        </xsl:for-each>
                },
				
			   accountTypeCodeMapping: {
		  			<xsl:for-each select="/static_company/account_types">
							<xsl:variable name="account_type_mapping"><xsl:value-of select="account_type_mapping"/></xsl:variable>
		         			<xsl:variable name="account_type_code"><xsl:value-of select="account_type_code"/></xsl:variable>
							"<xsl:value-of select="$account_type_mapping"/>":{
							"accountTypeMapping":"<xsl:value-of select="$account_type_mapping"/>",
							"accountTypeCode":"<xsl:value-of select="$account_type_code"/>"
								},
						</xsl:for-each>
						 "*":{}
			    	
			    	},
			   perBankAccountTypeCodeMapping: {
		  			<xsl:for-each select="/static_company/account_type_per_banks/account_type_per_bank/account_types">
							<xsl:variable name="account_type_mapping"><xsl:value-of select="account_type_mapping"/></xsl:variable>
		         			<xsl:variable name="account_type_code"><xsl:value-of select="account_type_code"/></xsl:variable>
							"<xsl:value-of select="$account_type_mapping"/>":{
							"accountTypeMapping":"<xsl:value-of select="$account_type_mapping"/>",
							"accountTypeCode":"<xsl:value-of select="$account_type_code"/>"
								},
						</xsl:for-each>
						 "*":{}
					},
			     backOfficeConfig: {
		  			<xsl:for-each select="/static_company/backoffices/backoffice">
							<xsl:variable name="name"><xsl:value-of select="name"/></xsl:variable>
		         			<xsl:variable name="type"><xsl:value-of select="type"/></xsl:variable>
							"<xsl:value-of select="$name"/>":
							"<xsl:value-of select="$type"/>"
							,
						</xsl:for-each>
						 "*":""
			    	
			    	},
			    	
				 backOfficeIndexConfig: {
		  			<xsl:for-each select="/static_company/backoffices/backoffice">
							<xsl:variable name="name"><xsl:value-of select="name"/></xsl:variable>
		         			<xsl:variable name="type"><xsl:value-of select="type"/></xsl:variable>
							"<xsl:value-of select="$type"/>":
							"<xsl:value-of select="$name"/>"
							,
						</xsl:for-each>
						 "*":""
			    	
			    	},			    	
			    	
			    isBankGroupLogin : <xsl:choose><xsl:when test="$companyType='02'">true</xsl:when><xsl:otherwise>false</xsl:otherwise></xsl:choose>	
	    	
	    	});
   		});
   		

  </script>
   <!-- Javascript imports  -->
   <xsl:call-template name="js-imports"/>
   <!-- Password Policy Fields -->
   <xsl:call-template name="e2ee-password-policy">
	   	<xsl:with-param name="password_mimimum_length"><xsl:value-of select="$password_mimimum_length"/></xsl:with-param>
	   	<xsl:with-param name="password_maximum_length"><xsl:value-of select="$password_maximum_length"/></xsl:with-param>
	   	<xsl:with-param name="password_charset"><xsl:value-of select="$password_charset"/></xsl:with-param>
	   	<xsl:with-param name="allowUserNameInPasswordValue"><xsl:value-of select="defaultresource:getResource('ALLOW_USERNAME_IN_PASSWORD_VALUE')"/></xsl:with-param>
   </xsl:call-template>
   <script>
  	dojo.ready(function(){
  		misys.toggleLiqReferenceSection('bank','up');
  	});
  </script>
  </xsl:template>
  
 <!--                                     -->  
 <!-- BEGIN LOCAL TEMPLATES FOR THIS FORM -->
 <!--                                     -->
 
 <!-- Additional JS imports for this form are -->
 <!-- added here. -->
 <xsl:template name="js-imports">
  <xsl:call-template name="system-common-js-imports">
   <xsl:with-param name="xml-tag-name">static_company</xsl:with-param>
   <xsl:with-param name="binding">misys.binding.system.company_mc</xsl:with-param>
   <xsl:with-param name="override-help-access-key">SY_BANK</xsl:with-param>
   <xsl:with-param name="override-home-url">'/screen/<xsl:value-of select="$nextscreen"/>?option=<xsl:value-of select="$option"/>'</xsl:with-param>
  </xsl:call-template>
 </xsl:template>
 
 
 <xsl:template name="pooling-features">
 <xsl:if test ="$mode='MODIFY_FEATURES' or $mode='MODIFY_AWAITING_FEATURES'">
 	<xsl:call-template name="fieldset-wrapper">
 		<xsl:with-param name="legend">XSL_HEADER_LIQUIDITY_SETTINGS</xsl:with-param>
 		<xsl:with-param name="content">
 			<xsl:call-template name="column-container">
 				<xsl:with-param name="content">	
 					<xsl:call-template name="column-wrapper">
 						<xsl:with-param name="content">
	 						<xsl:choose>
		 						<xsl:when test="count(//static_company/bank)>1">
							 			<xsl:call-template name="select-field">
												<xsl:with-param name="label">BANK_LABEL</xsl:with-param>
												<xsl:with-param name="fieldsize">small</xsl:with-param>
												<xsl:with-param name="name">liq_bank</xsl:with-param>
												<xsl:with-param name="options">
													<xsl:for-each select="//static_company/bank">
														<option>
															<xsl:attribute name="value">
							            						<xsl:value-of select="abbv_name"></xsl:value-of>
							            					</xsl:attribute>
															<xsl:value-of select="abbv_name"/>
														</option>
													</xsl:for-each>
												</xsl:with-param>
										</xsl:call-template>
								</xsl:when>
								<xsl:otherwise>
									<xsl:variable name="bank"><xsl:value-of select="//static_company/bank"/></xsl:variable>
									<xsl:call-template name="input-field">
										<xsl:with-param name="label">BANK_LABEL</xsl:with-param>
										<xsl:with-param name="name">liq_bank</xsl:with-param>
										<xsl:with-param name="value"><xsl:value-of select="//static_company/bank/abbv_name"/></xsl:with-param>
										<xsl:with-param name="override-displaymode">view</xsl:with-param>
									</xsl:call-template>
								</xsl:otherwise>		
							</xsl:choose>		
						</xsl:with-param>
					</xsl:call-template>
			
 					<xsl:call-template name="column-wrapper">
 						<xsl:with-param name="content">
				 			<xsl:choose>
				 				<xsl:when test="count(/static_company/bank_liquidity/bank/reference)>1">
				 					<xsl:call-template name="select-field">
										<xsl:with-param name="label">REFERENCE_LABEL</xsl:with-param>
										<xsl:with-param name="fieldsize">small</xsl:with-param>
										<xsl:with-param name="name">liq_ref</xsl:with-param>
										<xsl:with-param name="options">
										</xsl:with-param>
									</xsl:call-template>
				 				</xsl:when>
				 				<xsl:otherwise>
				 					<xsl:call-template name="input-field">
				 						<xsl:with-param name="label">REFERENCE_LABEL</xsl:with-param>
										<xsl:with-param name="fieldsize">small</xsl:with-param>
										<xsl:with-param name="value"><xsl:value-of select="//static_company/bank_liquidity/bank/reference/reference_name"/></xsl:with-param>
										<xsl:with-param name="name">liq_ref</xsl:with-param>
										<xsl:with-param name="override-displaymode">view</xsl:with-param>
				 					</xsl:call-template>
				 				</xsl:otherwise>
				 			</xsl:choose>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:with-param>
			</xsl:call-template>		
			
				<div style="width:100%">
		 			<div class="userAccountsTableCell userAccountsTableCellOdd alignLeftWithPadding" style="width:100%;background-color:#C5E5F0;">
						<div style="float:left;background-color:#C5E5F0;">
							<xsl:value-of select="localization:getGTPString($language, 'XSL_HEADER_SWEEPING')"/>
						</div>
						<span>
							<xsl:attribute name="style">display:none;cursor:pointer;float:right;padding-right:10px;</xsl:attribute>
							<xsl:attribute name="id">liq_reference_list_down_bank</xsl:attribute>
							<a>
								<xsl:attribute name="onClick">misys.toggleLiqReferenceSection('bank','down');</xsl:attribute>
								<img>
									<xsl:attribute name="src"><xsl:value-of select="utils:getImagePath($actionDownImage)"/></xsl:attribute>
									<xsl:attribute name="alt"><xsl:value-of select="localization:getGTPString($language, 'OPEN_PRODUCTS_ASSIGNMENT')"/></xsl:attribute>
								</img>
							</a>
						</span>
						<span>
							<xsl:attribute name="style">display:inline;cursor:pointer;float:right;padding-right:10px</xsl:attribute>
							<xsl:attribute name="id">liq_reference_list_up_bank</xsl:attribute>
							<a>
								<xsl:attribute name="onClick">misys.toggleLiqReferenceSection('bank','up');</xsl:attribute>
								<img>
									<xsl:attribute name="src"><xsl:value-of select="utils:getImagePath($actionUpImage)"/></xsl:attribute>
									<xsl:attribute name="alt"><xsl:value-of select="localization:getGTPString($language, 'CLOSE_PRODUCTS_ASSIGNMENT')"/></xsl:attribute>
								</img>
							</a>
						</span> 			
		 			</div>
		 			
		 			<div id="ref_liq_bank">
				 		<xsl:call-template name="fieldset-wrapper">
							<xsl:with-param name="override-displaymode">view</xsl:with-param>
	   							<xsl:with-param name="content">	
		   							<xsl:call-template name="column-container">
			   							<xsl:with-param name="content">
			   							<xsl:call-template name="column-wrapper">
			   							<xsl:with-param name="content">
									 		<xsl:call-template name="input-field">
												<xsl:with-param name="label">XSL_FCM_STUCTURE_LABEL</xsl:with-param>
												<xsl:with-param name="name">structuretype</xsl:with-param>
												<xsl:with-param name="value">&nbsp;</xsl:with-param>
												<xsl:with-param name="override-displaymode">view</xsl:with-param>
												<!-- <xsl:with-param name="type">list</xsl:with-param> -->
										   	</xsl:call-template>
										   	<br/>
									 		<xsl:call-template name="input-field">
												<xsl:with-param name="label">XSL_FCM_EXECUTION_TYPE_LABEL</xsl:with-param>
												<xsl:with-param name="name">executiontype</xsl:with-param>
												<xsl:with-param name="value">&nbsp;</xsl:with-param>
												<xsl:with-param name="override-displaymode">view</xsl:with-param>
										   	</xsl:call-template>
										   	<br/>
									 		<xsl:call-template name="input-field">
												<xsl:with-param name="label">XSL_FCM_TRIGGER_EVENT_TYPE_LABEL</xsl:with-param>
												<xsl:with-param name="name">balance</xsl:with-param>
												<xsl:with-param name="value">&nbsp;</xsl:with-param>
												<xsl:with-param name="override-displaymode">view</xsl:with-param>
										   	</xsl:call-template>
										   	<br/>
									 		<xsl:call-template name="input-field">
									 			<xsl:with-param name="label">XSL_FCM_ACCOUNT_TYPES</xsl:with-param>
												<xsl:with-param name="name">accounts</xsl:with-param>
												<xsl:with-param name="value">&nbsp;</xsl:with-param>
												<xsl:with-param name="override-displaymode">view</xsl:with-param>
										   	</xsl:call-template>
										   	<br/>
									 		<xsl:call-template name="input-field">
												<xsl:with-param name="label">XSL_FCM_ENTITY_TYPE_LABEL</xsl:with-param>
												<xsl:with-param name="name">entity_type</xsl:with-param>
												<xsl:with-param name="value">&nbsp;</xsl:with-param>
												<xsl:with-param name="override-displaymode">view</xsl:with-param>
										   	</xsl:call-template>
										   	<br/>
									 		<xsl:call-template name="input-field">
												<xsl:with-param name="label">XSL_FCM_MULTIBANK_SUPPORTED_LABEL</xsl:with-param>
												<xsl:with-param name="name">multibank</xsl:with-param>
												<xsl:with-param name="value">&nbsp;</xsl:with-param>
												<xsl:with-param name="override-displaymode">view</xsl:with-param>
										   	</xsl:call-template>
										   	<br/>
									 		<xsl:call-template name="input-field">
												<xsl:with-param name="label">XSL_FCM_INTER_ACCOUNT_TRACKING_LABEL</xsl:with-param>
												<xsl:with-param name="name">inter_account_track</xsl:with-param>
												<xsl:with-param name="value">&nbsp;</xsl:with-param>
												<xsl:with-param name="override-displaymode">view</xsl:with-param>
										   	</xsl:call-template>
										   	<br/>
									 		<xsl:call-template name="input-field">
												<xsl:with-param name="label">XSL_FCM_NON_LIVE_STRUCTURE_LABEL</xsl:with-param>
												<xsl:with-param name="name">non_live</xsl:with-param>
												<xsl:with-param name="value">&nbsp;</xsl:with-param>
												<xsl:with-param name="override-displaymode">view</xsl:with-param>
										   	</xsl:call-template>
										   	<br/>
									 		<xsl:call-template name="input-field">
												<xsl:with-param name="label">XSL_FCM_CROSS_BORDER_SUPPORT_LABEL</xsl:with-param>
												<xsl:with-param name="name">cross_border</xsl:with-param>
												<xsl:with-param name="override-displaymode">view</xsl:with-param>
												<xsl:with-param name="value">&nbsp;</xsl:with-param>
										   	</xsl:call-template>
										   	<br/>
									 		<xsl:call-template name="input-field">
												<xsl:with-param name="label">XSL_FCM_MULTI_CURRENCY_SUPPORTED_LABEL</xsl:with-param>
												<xsl:with-param name="name">multi_currency</xsl:with-param>
												<xsl:with-param name="override-displaymode">view</xsl:with-param>
												<xsl:with-param name="value">&nbsp;</xsl:with-param>
										   	</xsl:call-template>
										   	<br/>
										   	<xsl:call-template name="input-field">
												<xsl:with-param name="label">XSL_FCM_SWEEP_BACK_LABEL</xsl:with-param>
												<xsl:with-param name="name">sweep_back</xsl:with-param>
												<xsl:with-param name="override-displaymode">view</xsl:with-param>
												<xsl:with-param name="value">&nbsp;</xsl:with-param>
										   	</xsl:call-template>
										   	<br/>
										</xsl:with-param>
										</xsl:call-template>
										<xsl:call-template name="column-wrapper">
											<xsl:with-param name="content">
												<xsl:call-template name="input-field">
									 			<xsl:with-param name="label">XSL_FCM_LIST_OF_CURRENCIES_LABEL</xsl:with-param>
												<xsl:with-param name="name">currency</xsl:with-param>
												<xsl:with-param name="override-displaymode">view</xsl:with-param>
												<xsl:with-param name="value">&nbsp;</xsl:with-param>
										   	</xsl:call-template>
											</xsl:with-param>
										</xsl:call-template>
									</xsl:with-param>
									</xsl:call-template>																																																																
								</xsl:with-param>   							   	
						   	</xsl:call-template>	
	 				</div>
	 				<div id="liq_no_data" class="dojoxGridMasterMessages" style="display:none">
	 						<xsl:value-of select="localization:getGTPString($language, 'XSL_FCM_SELECT_NO_BANK_REF_WARNING')"/>
	 				</div>
	 			</div>
 		</xsl:with-param>
 	</xsl:call-template>
 </xsl:if>
 <xsl:if test="$mode='DISPLAY_FEATURES' or $mode='CHECK_FEATURES'">
 	<xsl:call-template name="fieldset-wrapper">
	 		<xsl:with-param name="legend">XSL_HEADER_LIQUIDITY_SETTINGS</xsl:with-param>
	 		<xsl:with-param name="content">
 				<xsl:for-each select="//static_company/bank_liquidity/bank">
 					<xsl:variable name="bankName" select="./bank_name"/>
		 				<xsl:for-each select="/static_company/bank_liquidity/bank[bank_name=$bankName]/reference">
			 				<xsl:variable name="ref" select="./reference_name"/>
			 				<xsl:call-template name="column-container">
			 					<xsl:with-param name="content">
			 						<div style="width:100%;">
		  								<h3 class="userAccountsTableCell userAccountsTableCellOdd alignLeftWithPadding" style="width:100%;height:26px;background-color:#C5E5F0;"><xsl:value-of select="$bankName"/>-<xsl:value-of select="$ref"/></h3>
		  								<xsl:variable name="id">bank_custref_<xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/></xsl:variable>
		  								<div class="userAccountsTableCell userAccountsTableCellOdd alignLeftWithPadding" style="width:100%;background-color:#C5E5F0;">
											<h3 style="float:left;background-color:#C5E5F0;">
												<xsl:value-of select="localization:getGTPString($language, 'XSL_HEADER_SWEEPING')"/>
											</h3>
											<span>
												<xsl:attribute name="style">display:none;cursor:pointer;float:right;padding-right:10px;</xsl:attribute>
												<xsl:attribute name="id">reference_list_down_<xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/></xsl:attribute>
												<a>
													<xsl:attribute name="onClick">misys.toggleViewLiqReferenceSection('<xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>','down');</xsl:attribute>
													<img>
														<xsl:attribute name="src"><xsl:value-of select="utils:getImagePath($actionDownImage)"/></xsl:attribute>
														<xsl:attribute name="alt"><xsl:value-of select="localization:getGTPString($language, 'OPEN_PRODUCTS_ASSIGNMENT')"/></xsl:attribute>
													</img>
												</a>
											</span>
											<span>
												<xsl:attribute name="style">display:inline;cursor:pointer;float:right;padding-right:10px</xsl:attribute>
												<xsl:attribute name="id">reference_list_up_<xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/></xsl:attribute>
												<a>
													<xsl:attribute name="onClick">misys.toggleViewLiqReferenceSection('<xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>','up');</xsl:attribute>
													<img>
														<xsl:attribute name="src"><xsl:value-of select="utils:getImagePath($actionUpImage)"/></xsl:attribute>
														<xsl:attribute name="alt"><xsl:value-of select="localization:getGTPString($language, 'CLOSE_PRODUCTS_ASSIGNMENT')"/></xsl:attribute>
													</img>
												</a>
											</span> 			
		 								</div>
		  								<div id="{$id}">
									 		<xsl:call-template name="fieldset-wrapper">
												<xsl:with-param name="override-displaymode">view</xsl:with-param>
						   							<xsl:with-param name="content">	
							   							<xsl:call-template name="column-container">
								   							<xsl:with-param name="content">
								   							<xsl:call-template name="column-wrapper">
								   							<xsl:with-param name="content">
								   								<xsl:if test="liq_details/structuretype[.!='']">
															 		<xsl:call-template name="input-field">
																		<xsl:with-param name="label">XSL_FCM_STUCTURE_LABEL</xsl:with-param>
																		<xsl:with-param name="name"><xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>_structuretype</xsl:with-param>
																		<xsl:with-param name="value"><xsl:value-of select="utils:arrayToHtmlUL(liq_details/structuretype)"/></xsl:with-param>
																		<xsl:with-param name="override-displaymode">view</xsl:with-param>
																   		<xsl:with-param name="type">list</xsl:with-param>
																   	</xsl:call-template>
																   	<br/>
															   	</xsl:if>
															   	<xsl:if test="liq_details/executiontype[.!='']">
															 		<xsl:call-template name="input-field">
																		<xsl:with-param name="label">XSL_FCM_EXECUTION_TYPE_LABEL</xsl:with-param>
																		<xsl:with-param name="name"><xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>_executiontype</xsl:with-param>
																		<xsl:with-param name="value"><xsl:value-of select="utils:arrayToHtmlUL(liq_details/executiontype)"/></xsl:with-param>
																		<xsl:with-param name="override-displaymode">view</xsl:with-param>
																		<xsl:with-param name="type">list</xsl:with-param>
																   	</xsl:call-template>
																   	<br/>
															   	</xsl:if>
															   	<xsl:if test="liq_details/eventtriggertype[.!='']">
															 		<xsl:call-template name="input-field">
																		<xsl:with-param name="label">XSL_FCM_TRIGGER_EVENT_TYPE_LABEL</xsl:with-param>
																		<xsl:with-param name="name"><xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>_balance</xsl:with-param>
																		<xsl:with-param name="value"><xsl:value-of select="liq_details/eventtriggertype"/></xsl:with-param>
																		<xsl:with-param name="override-displaymode">view</xsl:with-param>
																   	</xsl:call-template>
																   	<br/>
															   	</xsl:if>
															   	<xsl:if test="liq_details/accounts[.!='']">
															 		<xsl:call-template name="input-field">
															 			<xsl:with-param name="label">XSL_FCM_ACCOUNT_TYPES</xsl:with-param>
																		<xsl:with-param name="name"><xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>_accounts</xsl:with-param>
																		<xsl:with-param name="value"><xsl:value-of select="utils:arrayToHtmlUL(liq_details/accounts)"/></xsl:with-param>
																		<xsl:with-param name="override-displaymode">view</xsl:with-param>
																		<xsl:with-param name="type">list</xsl:with-param>
																   	</xsl:call-template>
																   	<br/>
															   	</xsl:if>
															   	<xsl:if test="liq_details/entitytype[.!='']">
															 		<xsl:call-template name="input-field">
																		<xsl:with-param name="label">XSL_FCM_ENTITY_TYPE_LABEL</xsl:with-param>
																		<xsl:with-param name="name"><xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>_entity_type</xsl:with-param>
																		<xsl:with-param name="value"><xsl:value-of select="liq_details/entitytype"/></xsl:with-param>
																		<xsl:with-param name="override-displaymode">view</xsl:with-param>
																   	</xsl:call-template>
																   	<br/>
															   	</xsl:if>
															   	<xsl:if test="liq_details/multibank[.!='']">
															 		<xsl:call-template name="input-field">
																		<xsl:with-param name="label">XSL_FCM_MULTIBANK_SUPPORTED_LABEL</xsl:with-param>
																		<xsl:with-param name="name"><xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>_multibank</xsl:with-param>
																		<xsl:with-param name="value">
																			<xsl:choose>
																				<xsl:when test="liq_details/multibank[.='Y']">
																					<xsl:value-of select="localization:getGTPString($language,'XSL_YES')"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="localization:getGTPString($language,'XSL_NO')"/>
																				</xsl:otherwise>
																			</xsl:choose>	
																		</xsl:with-param>
																		<xsl:with-param name="override-displaymode">view</xsl:with-param>
																   	</xsl:call-template>
																   	<br/>
															   	</xsl:if>
															   	<xsl:if test="liq_details/interaccounttrack[.!='']">
															 		<xsl:call-template name="input-field">
																		<xsl:with-param name="label">XSL_FCM_INTER_ACCOUNT_TRACKING_LABEL</xsl:with-param>
																		<xsl:with-param name="name"><xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>_inter_account_track</xsl:with-param>
																		<xsl:with-param name="value">
																			<xsl:choose>
																				<xsl:when test="liq_details/interaccounttrack[.='Y']">
																					<xsl:value-of select="localization:getGTPString($language,'XSL_YES')"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="localization:getGTPString($language,'XSL_NO')"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:with-param>																		
																		<xsl:with-param name="override-displaymode">view</xsl:with-param>
																   	</xsl:call-template>
																   	<br/>
															   	</xsl:if>
															   	<xsl:if test="liq_details/nonlive[.!='']">
															 		<xsl:call-template name="input-field">
																		<xsl:with-param name="label">XSL_FCM_NON_LIVE_STRUCTURE_LABEL</xsl:with-param>
																		<xsl:with-param name="name"><xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>_non_live</xsl:with-param>
																		<xsl:with-param name="value">
																			<xsl:choose>
																				<xsl:when test="liq_details/nonlive[.='Y']">
																					<xsl:value-of select="localization:getGTPString($language,'XSL_YES')"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="localization:getGTPString($language,'XSL_NO')"/>
																				</xsl:otherwise>
																			</xsl:choose>																	
																		</xsl:with-param>
																		<xsl:with-param name="override-displaymode">view</xsl:with-param>
																   	</xsl:call-template>
																   	<br/>
																</xsl:if>
																<xsl:if test="liq_details/crossborder[.!='']">
															 		<xsl:call-template name="input-field">
																		<xsl:with-param name="label">XSL_FCM_CROSS_BORDER_SUPPORT_LABEL</xsl:with-param>
																		<xsl:with-param name="name"><xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>_cross_border</xsl:with-param>
																		<xsl:with-param name="override-displaymode">view</xsl:with-param>
																		<xsl:with-param name="value">
																			<xsl:choose>
																				<xsl:when test="liq_details/crossborder[.='Y']">
																					<xsl:value-of select="localization:getGTPString($language,'XSL_YES')"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="localization:getGTPString($language,'XSL_NO')"/>
																				</xsl:otherwise>
																			</xsl:choose>																		
																		</xsl:with-param>
																   	</xsl:call-template>
																   	<br/>
																</xsl:if>
																<xsl:if test="liq_details/multicurrency[.!='']">
															 		<xsl:call-template name="input-field">
																		<xsl:with-param name="label">XSL_FCM_MULTI_CURRENCY_SUPPORTED_LABEL</xsl:with-param>
																		<xsl:with-param name="name"><xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>_multi_currency</xsl:with-param>
																		<xsl:with-param name="override-displaymode">view</xsl:with-param>
																		<xsl:with-param name="value">
																			<xsl:choose>
																				<xsl:when test="liq_details/multicurrency[.='Y']">
																					<xsl:value-of select="localization:getGTPString($language,'XSL_YES')"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="localization:getGTPString($language,'XSL_NO')"/>
																				</xsl:otherwise>
																			</xsl:choose>																	
																		</xsl:with-param>
																   	</xsl:call-template>
																   	<br/>
																</xsl:if>   
																<xsl:if test="liq_details/sweepback[.!='']">	
																   	<xsl:call-template name="input-field">
																		<xsl:with-param name="label">XSL_FCM_SWEEP_BACK_LABEL</xsl:with-param>
																		<xsl:with-param name="name"><xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>_sweep_back</xsl:with-param>
																		<xsl:with-param name="override-displaymode">view</xsl:with-param>
																		<xsl:with-param name="value">
																			<xsl:choose>
																				<xsl:when test="liq_details/sweepback[.='Y']">
																					<xsl:value-of select="localization:getGTPString($language,'XSL_YES')"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="localization:getGTPString($language,'XSL_NO')"/>
																				</xsl:otherwise>
																			</xsl:choose>																	
																		</xsl:with-param>
																   	</xsl:call-template>
																   	<br/>
																 </xsl:if>  	
															</xsl:with-param>
															</xsl:call-template>
															<xsl:call-template name="column-wrapper">
																<xsl:with-param name="content">
																	<xsl:if test="liq_details/currency[.!='']">
																		<xsl:call-template name="input-field">
																 			<xsl:with-param name="label">XSL_FCM_LIST_OF_CURRENCIES_LABEL</xsl:with-param>
																			<xsl:with-param name="name"><xsl:value-of select="$bankName"/><xsl:value-of select="$ref"/>_currency</xsl:with-param>
																			<xsl:with-param name="override-displaymode">view</xsl:with-param>
																			<xsl:with-param name="value"><xsl:value-of select="utils:arrayToHtmlUL(liq_details/currency)"/></xsl:with-param>
																			<xsl:with-param name="type">list</xsl:with-param>
																   		</xsl:call-template>
																   	</xsl:if>	
																</xsl:with-param>
															</xsl:call-template>
														</xsl:with-param>
														</xsl:call-template>																																																																
													</xsl:with-param>   							   	
											   	</xsl:call-template>
	 									</div>
			 						</div>
			 					</xsl:with-param>
			 				</xsl:call-template>
		 				</xsl:for-each>
 				</xsl:for-each>
	 		</xsl:with-param>
	 	</xsl:call-template>
 </xsl:if>
 </xsl:template>
 
 <!-- Additional hidden fields for this form are  -->
 <!-- added here. -->
 <xsl:template name="hidden-fields">
  <div class="widgetContainer">
   <xsl:call-template name="hidden-field">
    <xsl:with-param name="name">brch_code</xsl:with-param>
   </xsl:call-template>
   <xsl:call-template name="hidden-field">
    <xsl:with-param name="name">company_id</xsl:with-param>
   </xsl:call-template>
   <xsl:call-template name="hidden-field">
    <xsl:with-param name="name">company_group</xsl:with-param>
   </xsl:call-template>
    <xsl:call-template name="hidden-field">
    	<xsl:with-param name="id">multiBank</xsl:with-param>
    	<xsl:with-param name="value"><xsl:value-of select="$isMultiBank"/></xsl:with-param>
   </xsl:call-template>
   <xsl:call-template name="hidden-field">
    <xsl:with-param name="name">owner_id</xsl:with-param>
    <xsl:with-param name="id">owner_id</xsl:with-param>
    <xsl:with-param name="value"><xsl:value-of select="owner_id"/></xsl:with-param>
   </xsl:call-template>
   <xsl:call-template name="hidden-field">
    <xsl:with-param name="name">owner_is_group</xsl:with-param>
    <xsl:with-param name="id">owner_is_group</xsl:with-param>
    <xsl:with-param name="value"><xsl:value-of select="owner_is_group"/></xsl:with-param>
   </xsl:call-template>
   <xsl:call-template name="hidden-field">
    <xsl:with-param name="name">address_address_line_1</xsl:with-param>
    <xsl:with-param name="value"><xsl:value-of select="address_line_1"/></xsl:with-param>
   </xsl:call-template>
   <xsl:call-template name="hidden-field">
    <xsl:with-param name="name">swift_address_address_line_1</xsl:with-param>
    <xsl:with-param name="value"><xsl:value-of select="post_code"/></xsl:with-param>
   </xsl:call-template>
   <xsl:call-template name="hidden-field">
    <xsl:with-param name="name">type</xsl:with-param>
	<!-- Param value not necessary because the node and the value has the same name -->
   </xsl:call-template>
   <xsl:call-template name="hidden-field">
    <xsl:with-param name="name">bank_name_abbv</xsl:with-param>
    <xsl:with-param name="value"><xsl:value-of select="bank/abbv_name"/></xsl:with-param>
   </xsl:call-template>
   
    <xsl:call-template name="hidden-field">
     <xsl:with-param name="name">swiftBicCodeRegexValue</xsl:with-param>
	 <xsl:with-param name="value"><xsl:value-of select="defaultresource:getResource('BIC_CHARSET')"/></xsl:with-param>
	</xsl:call-template>
	
    <xsl:call-template name="hidden-field">
    <xsl:with-param name="name">tma_prop_id</xsl:with-param>
    <xsl:with-param name="id">tma_prop_id</xsl:with-param>
    </xsl:call-template>
    
    <xsl:call-template name="hidden-field"> 
     	<xsl:with-param name="name">proprietary_Sep</xsl:with-param>
     	<xsl:with-param name="id">proprietary_Separator</xsl:with-param>
     	<xsl:with-param name="value"><xsl:value-of select="substring(defaultresource:getResource('TMA_PROPRIETARY_ID_SEPARATOR'), 1, 1)"/></xsl:with-param>
    </xsl:call-template>
    
    <xsl:call-template name="hidden-field"> 
     	<xsl:with-param name="id">proprietaryId_Label</xsl:with-param>
     	<xsl:with-param name="value"><xsl:value-of select="localization:getGTPString($language, 'XSL_TMA_PROPRIETARY_ID')"/></xsl:with-param>
    </xsl:call-template>
    
    <xsl:call-template name="hidden-field"> 
        <xsl:with-param name="id">proprietaryType_Label</xsl:with-param>
     	<xsl:with-param name="value"><xsl:value-of select="localization:getGTPString($language, 'XSL_TMA_PROPRIETARY_TYPE')"/></xsl:with-param>
    </xsl:call-template>
             
	<xsl:call-template name="hidden-field">
    	<xsl:with-param name="id">account_maintenance_permission</xsl:with-param>
    	<xsl:with-param name="value">
    		<xsl:choose>
    			<xsl:when test="securitycheck:hasPermission(utils:getUserACL($rundata),'sy_account_maintain_access',utils:getUserEntities($rundata))">Y</xsl:when>
    			<xsl:otherwise>N</xsl:otherwise>
    		</xsl:choose>
    	</xsl:with-param>
   </xsl:call-template>
   <xsl:call-template name="hidden-field">
    <xsl:with-param name="id">account_delete_permission</xsl:with-param>
    	<xsl:with-param name="value">
    		<xsl:choose>
    			<xsl:when test="securitycheck:hasPermission(utils:getUserACL($rundata),'sy_account_delete_access',utils:getUserEntities($rundata))">Y</xsl:when>
    			<xsl:otherwise>N</xsl:otherwise>
    		</xsl:choose>
    	</xsl:with-param>
   </xsl:call-template>
   <xsl:call-template name="hidden-field">
    	<xsl:with-param name="id">company_type</xsl:with-param>
    	<xsl:with-param name="value"><xsl:value-of select="$companyType"/></xsl:with-param>
   </xsl:call-template>
   <!-- To default the selected customer reference -->
    <xsl:call-template name="hidden-field">
    	<xsl:with-param name="name">default_reference_hidden</xsl:with-param>
    	<xsl:with-param name="value">
    		<xsl:for-each select="bank/customer_reference">
    			<xsl:variable name="default"><xsl:value-of select="default_reference"/></xsl:variable>
    			<xsl:variable name="ref"><xsl:value-of select="reference"/></xsl:variable>
    			<xsl:if test="$default = 'Y'">
    				<xsl:value-of select="utils:decryptApplicantReference($ref)"/>
    			</xsl:if>
    		</xsl:for-each>
    	</xsl:with-param>
   </xsl:call-template>
   
   <xsl:call-template name="hidden-field">
    	<xsl:with-param name="name">upload_size_max</xsl:with-param>
    	<xsl:with-param name="value"><xsl:value-of select="jetspeedresources:getString('services.UploadService.size.max')"></xsl:value-of> </xsl:with-param>
   </xsl:call-template>
    <xsl:call-template name="hidden-field">   
     <xsl:with-param name="name">duplicate_across_banks</xsl:with-param>
      <xsl:with-param name="value"><xsl:value-of select="defaultresource:getResource('REFERENCE_MULTI_BANK_DUPLICATE')"></xsl:value-of> </xsl:with-param>
    </xsl:call-template>
 </div>
 </xsl:template>

  <!--
  Type and Preferences 
  -->
  <xsl:template name="company-prefs">
  	<xsl:param name="is-counterparty">false</xsl:param>
  	<!-- For non ammendable file types -->
  	<xsl:param name="node-name-page-type">dashboard_screen_type</xsl:param>
 	<xsl:param name="label-1">XSL_JURISDICTION_CLASSIC_DASHBOARD_SCREEN_TYPE</xsl:param>
 	<xsl:param name="label-2">XSL_JURISDICTION_MODERN_DASHBOARD_SCREEN_TYPE</xsl:param>
  	<xsl:param name="first-value-page-type">01</xsl:param> <!-- Value of the first radio button: save draft on error -->
  	<xsl:param name="second-value-page-type">02</xsl:param><!-- Value of the second radio button: Bulk successfull tnx and tnx with error separately--> 
  	<xsl:param name="group-label-page-type">XSL_JURISDICTION_DASHBOARD_SCREEN_TYPE</xsl:param>
  	
  	<xsl:variable name="current"><xsl:value-of select="language"/></xsl:variable>
  	<xsl:call-template name="fieldset-wrapper">
   		<xsl:with-param name="legend">XSL_HEADER_TYPE_PREFERENCES_DETAILS</xsl:with-param>
   		<xsl:with-param name="content">

	  		<!-- Selection of the language -->
	  		<xsl:call-template name="select-field">
     			<xsl:with-param name="label">XSL_JURISDICTION_LANGUAGE_LOCALE</xsl:with-param>
     			<xsl:with-param name="name">language</xsl:with-param>
     			<xsl:with-param name="value"><xsl:value-of select="$current"/></xsl:with-param>
     			<xsl:with-param name="required">Y</xsl:with-param>
     			<xsl:with-param name="options">
	     		  <xsl:choose>
     			   <xsl:when test="$displaymode='edit'">
     			    <xsl:if test="string($languages) != ''">
	      			<xsl:for-each select="$languages/languages/language">
	       			 <xsl:variable name="optionLanguage"><xsl:value-of select="."/></xsl:variable>
  					  <option>
   						<xsl:attribute name="value"><xsl:value-of select="$optionLanguage"/></xsl:attribute>
   						<xsl:if test="$current = $optionLanguage">
   						 <xsl:attribute name="selected"/>
   						</xsl:if>
   						<xsl:value-of select="localization:getDecode($language, 'N061', $optionLanguage)"/>
  					  </option>
	      			 </xsl:for-each>
	      			 </xsl:if>
	      		   </xsl:when>
	      		   <xsl:otherwise>
	      		    <xsl:variable name="optionLanguage"><xsl:value-of select="./language"/></xsl:variable>
     			    <xsl:value-of select="localization:getDecode($language, 'N061', $optionLanguage)"/>
	      		   </xsl:otherwise>
	      		  </xsl:choose>
	      		 
     			</xsl:with-param>
    		</xsl:call-template>
    		
    		<!-- Selection of the currency: in "system_common.xsl"-->
    		<xsl:call-template name="currency-template"/>
      		
			<div>
	      		<xsl:if test="$is-counterparty = 'true'">
		      		<xsl:attribute name="style">display:none</xsl:attribute>
		      	</xsl:if>
	    		<!-- Internal Content Provider -->
	    		<xsl:choose>
	    			<xsl:when test="$displaymode = 'edit'">
	    				<xsl:call-template name="select-field">
		     			<xsl:with-param name="label">XSL_JURISDICTION_NEWS_INTERNAL</xsl:with-param>
		     			<xsl:with-param name="name">internal_channel</xsl:with-param>
		     			<xsl:with-param name="value"><xsl:value-of select="channel[@selected='true' and type = '01']/id"/></xsl:with-param>	     			
		     			<xsl:with-param name="options">
		     				<option></option>
		     			<xsl:apply-templates select="channel[type = '01' and news_destination = '03']"/>
		     			</xsl:with-param>
		     			</xsl:call-template>
	    			</xsl:when>
	    			<xsl:otherwise>
	    				<xsl:call-template name="hidden-field">
					  		<xsl:with-param name="name">internal_channel</xsl:with-param>
					    	<xsl:with-param name="value"><xsl:value-of select="channel[@selected='true' and type = '01']/id"/></xsl:with-param>
					  	</xsl:call-template>
					  	<xsl:call-template name="input-field">
					  		<xsl:with-param name="label">XSL_JURISDICTION_NEWS_INTERNAL</xsl:with-param>
					  		<xsl:with-param name="name">internal_channel_view</xsl:with-param>
					    	<xsl:with-param name="value"><xsl:value-of select="channel[@selected='true' and type = '01']/name"/></xsl:with-param>
                     	 	<xsl:with-param name="override-displaymode">view</xsl:with-param>
					  	</xsl:call-template>
	    			</xsl:otherwise>
	    		</xsl:choose>
	    		
	    		<!-- Syndicated News Feed -->
	    		<xsl:if test="count(channel[type = '02']) > 0">
		    		<xsl:call-template name="select-field">
		     			<xsl:with-param name="label">XSL_JURISDICTION_NEWS_SYNDICATED</xsl:with-param>
		     			<xsl:with-param name="name">syndicated_channel</xsl:with-param>
	     				<xsl:with-param name="value"><xsl:value-of select="channel[@selected='true' and type = '02']/id"/></xsl:with-param>
		     			<xsl:with-param name="options">
		     				<option></option>
							<xsl:apply-templates select="channel[type = '02']"/>
					    </xsl:with-param> 
		    		</xsl:call-template>
	    		</xsl:if>
    		</div>
    		
    		<!-- Dashboard screen type -->
	    	<xsl:if test="defaultresource:getResource('ANGULAR_HOMEPAGE') = 'true' and defaultresource:getResource('ENABLE_UXADDON') = 'true'">
	    		<xsl:call-template name="multioption-inline-wrapper">
			      <xsl:with-param name="group-label" select="$group-label-page-type"/>
			      <xsl:with-param name="content">
				        <xsl:call-template name="multichoice-field">
					      <xsl:with-param name="group-label" select="$group-label-page-type"/>
					      <xsl:with-param name="label" select="$label-1"/>
					      <xsl:with-param name="name" select="$node-name-page-type"/>
					      <xsl:with-param name="id"><xsl:value-of select="$node-name-page-type"/></xsl:with-param>
					      <xsl:with-param name="value" select="$first-value-page-type"/>
					      <xsl:with-param name="checked"><xsl:if test="dashboard_screen_type[. = $first-value-page-type]">Y</xsl:if></xsl:with-param>
					      <xsl:with-param name="type">radiobutton</xsl:with-param>
					      <xsl:with-param name="inline">Y</xsl:with-param>
					    </xsl:call-template>
		
					    <xsl:call-template name="multichoice-field">
					      <xsl:with-param name="group-label" select="$group-label-page-type"/>
					      <xsl:with-param name="label" select="$label-2"/>
					      <xsl:with-param name="name" select="$node-name-page-type"/>
					      <xsl:with-param name="id"><xsl:value-of select="$node-name-page-type"/>_1</xsl:with-param>
					      <xsl:with-param name="value" select="$second-value-page-type"/>
					      <xsl:with-param name="checked"><xsl:if test="dashboard_screen_type[. = $second-value-page-type]">Y</xsl:if></xsl:with-param>
					      <xsl:with-param name="type">radiobutton</xsl:with-param>
					      <xsl:with-param name="inline">Y</xsl:with-param>
					    </xsl:call-template>
			      </xsl:with-param>
		 		</xsl:call-template>
		 	</xsl:if>	
  		</xsl:with-param>
  	</xsl:call-template>
  </xsl:template>
 
 
 <!--
 Others Details 
  -->
  <xsl:template name="company-other-details">
  	<xsl:param name="is-counterparty">false</xsl:param>
  
  	<xsl:call-template name="fieldset-wrapper">
   		<xsl:with-param name="legend">XSL_HEADER_OTHER_DETAILS</xsl:with-param>
   		<xsl:with-param name="content">
   			 <div>
     		  <xsl:call-template name="select-field">
	     			<xsl:with-param name="label"></xsl:with-param>
	     			<xsl:with-param name="label">XSL_ENTITY_LEGAL_ID_TYPE</xsl:with-param>
	     			<xsl:with-param name="name">legal_id_type</xsl:with-param>
	     			<xsl:with-param name="fieldsize">small</xsl:with-param>
	     			<xsl:with-param name="value"><xsl:value-of select="legal_id_type"/></xsl:with-param>
	     			<xsl:with-param name="appendClass">inlineBlock</xsl:with-param>
	     			<xsl:with-param name="required">N</xsl:with-param>
	     			<xsl:with-param name="options">
	     				<xsl:call-template name="legal-id-types"/>
	     			</xsl:with-param>
	   			 </xsl:call-template>
	   			  <xsl:call-template name="input-field">
	      			<xsl:with-param name="label"></xsl:with-param>
	      			<xsl:with-param name="name">legal_id_no</xsl:with-param>
	      			<xsl:with-param name="type">text</xsl:with-param>
	      			<xsl:with-param name="maxsize">30</xsl:with-param>
	      			<xsl:with-param name="appendClass">inlineBlock legalType</xsl:with-param>
	      			<xsl:with-param name="required">N</xsl:with-param>
	     		</xsl:call-template>
	     		 <xsl:call-template name="input-field">
			      <xsl:with-param name="name">country_legalid</xsl:with-param>
			      <xsl:with-param name="size">2</xsl:with-param>
			      <xsl:with-param name="maxsize">2</xsl:with-param>
			      <xsl:with-param name="fieldsize">xx-small</xsl:with-param>
			      <xsl:with-param name="uppercase">Y</xsl:with-param>
			      <xsl:with-param name="required"><xsl:choose><xsl:when test="subscriptionenable='true'">Y</xsl:when><xsl:otherwise>N</xsl:otherwise></xsl:choose></xsl:with-param>
			      <xsl:with-param name="appendClass">inlineBlock legalType</xsl:with-param>
		     	</xsl:call-template>
	     		<xsl:choose>
					 <xsl:when test="$displaymode='edit'"> 
					 	<xsl:call-template name="button-wrapper">
					      <xsl:with-param name="label">XSL_ALT_COUNTRY</xsl:with-param>
					      <xsl:with-param name="show-image">Y</xsl:with-param>
					      <xsl:with-param name="show-border">N</xsl:with-param>
					      <xsl:with-param name="onclick">misys.showCountryCodeDialog('codevalue', "['country_legalid']", 'C006', '', '','', 'width:400px;height:400px', '<xsl:value-of select="localization:getGTPString($language, 'TABLE_SUMMARY_COUNTRY_LIST')"/>', 'legal' === 'popup');return false;</xsl:with-param>
					      <xsl:with-param name="id">legal_country_img</xsl:with-param>
					      <xsl:with-param name="non-dijit-button">N</xsl:with-param>
					     </xsl:call-template>
					 </xsl:when>
				</xsl:choose>&nbsp;
				
			<xsl:variable name="isRMFunEnabled">
    			<xsl:value-of select="defaultresource:getResource('RM_GROUP_ENABLED')"/>
    		</xsl:variable>
    		<xsl:if test="$isRMFunEnabled='true'">
	     		<xsl:call-template name="input-field">
	    			<xsl:with-param name="button-type">rmGroup</xsl:with-param>
	    			<xsl:with-param name="label">XSL_PARA_RM_GROUP_LBL</xsl:with-param>
	    			<xsl:with-param name="name">rmGroup</xsl:with-param>
	    			<xsl:with-param name="value"><xsl:value-of select="./rmGroup"/></xsl:with-param>
	    			<xsl:with-param name="id">rmGroup</xsl:with-param>
	   			</xsl:call-template>
   			</xsl:if>
				
     		</div>
   			<xsl:call-template name="input-field">
      			<xsl:with-param name="label">XSL_JURISDICTION_CONTACT_NAME</xsl:with-param>
      			<xsl:with-param name="name">contact_name</xsl:with-param>
    		</xsl:call-template>
    		
    		<xsl:call-template name="input-field">
      			<xsl:with-param name="label">XSL_JURISDICTION_PHONE</xsl:with-param>
      			<xsl:with-param name="name">phone</xsl:with-param>
      			<xsl:with-param name="size">32</xsl:with-param>
       			<xsl:with-param name="maxsize">32</xsl:with-param>
    		</xsl:call-template>
    		
    		<xsl:call-template name="input-field">
      			<xsl:with-param name="label">XSL_JURISDICTION_FAX</xsl:with-param>
      			<xsl:with-param name="name">fax</xsl:with-param>
      			<xsl:with-param name="size">32</xsl:with-param>
       			<xsl:with-param name="maxsize">32</xsl:with-param>
    		</xsl:call-template>
    		
    		<xsl:call-template name="input-field">
      			<xsl:with-param name="label">XSL_JURISDICTION_TELEX</xsl:with-param>
      			<xsl:with-param name="name">telex</xsl:with-param>
      			<xsl:with-param name="size">32</xsl:with-param>
       			<xsl:with-param name="maxsize">32</xsl:with-param>
    		</xsl:call-template>
    		
    		<xsl:call-template name="input-field">
      			<xsl:with-param name="label">XSL_JURISDICTION_ADDRESS_BEI</xsl:with-param>
      			<xsl:with-param name="name">bei</xsl:with-param>
      			<xsl:with-param name="size">11</xsl:with-param>
       			<xsl:with-param name="maxsize">11</xsl:with-param>
                <xsl:with-param name="uppercase">Y</xsl:with-param>
                <xsl:with-param name="fieldsize">small</xsl:with-param>
    		</xsl:call-template>

	<xsl:if test="$displaymode='edit'">
		<xsl:call-template name="input-field">
			<xsl:with-param name="label">XSL_JURISDICTION_EMAIL</xsl:with-param>
			<xsl:with-param name="name">email</xsl:with-param>
			<xsl:with-param name="size">40</xsl:with-param>
			<xsl:with-param name="maxsize">255</xsl:with-param>
			<xsl:with-param name="required">
				<xsl:choose>
					<xsl:when test="$email_required = 'true'">Y</xsl:when>
					<xsl:otherwise>N</xsl:otherwise>
				</xsl:choose>
			</xsl:with-param>
			<xsl:with-param name="override-displaymode">edit</xsl:with-param>
		</xsl:call-template>
	</xsl:if>

	<xsl:if test="$displaymode='view' and email[.!='']">
		<xsl:call-template name="fieldset-wrapper">
			<xsl:with-param name="content">
					<div class="label">
						<span class="field">
							<xsl:value-of select="localization:getGTPString($language, 'XSL_JURISDICTION_EMAIL')" />
						</span>
					</div>
						<span style="word-break:break-all;padding-right:30px;display:inline-block;max-width:925px;text-align:left;position:absolute">
							<xsl:value-of select="email" />
						</span>
			</xsl:with-param>
		</xsl:call-template>
	</xsl:if>
	
    		<xsl:call-template name="input-field">
      			<xsl:with-param name="label">XSL_JURISDICTION_WEB</xsl:with-param>
      			<xsl:with-param name="name">web_address</xsl:with-param>
      			<xsl:with-param name="size">40</xsl:with-param>
       			<xsl:with-param name="maxsize">40</xsl:with-param>
    		</xsl:call-template>
    		
    		<xsl:call-template name="input-field">
      			<xsl:with-param name="label">XSL_JURISDICTION_CRM_EMAIL</xsl:with-param>
      			<xsl:with-param name="name">crm_email</xsl:with-param>
      			<xsl:with-param name="size">35</xsl:with-param>
       			<xsl:with-param name="maxsize">35</xsl:with-param>
    		</xsl:call-template>
    		
    		<!-- Show PSML template selection if enabled in property file -->
    		<xsl:variable name="showPSMLTemplate">
    			<xsl:value-of select="defaultresource:getResource('COMPANY_PROFILE_PSML_TEMPLATE_SELECTION')"/>
    		</xsl:variable>
    		<xsl:if test="$showPSMLTemplate='true'">
    			<xsl:call-template name="psml-template-field"/>
    		</xsl:if>

    		<div>
		    <!-- Display customer references for each bank -->
	   		<xsl:call-template name="attachments-customer-references">
	   			<xsl:with-param name="companyType"><xsl:value-of select="$companyType"/></xsl:with-param>
	   		</xsl:call-template>
	   		<!-- Default Reference -->
	   		<xsl:if test="$companyType != '02'">
	   		<xsl:choose>
	    		<xsl:when test="$displaymode='edit'">
		            <xsl:call-template name="select-field">
						<xsl:with-param name="label">XSL_DEFAULT_REFERENCE</xsl:with-param>
						<xsl:with-param name="name">default_reference</xsl:with-param>
						<xsl:with-param name="value"><xsl:value-of select="default_reference"/></xsl:with-param>
						<xsl:with-param name="required">N</xsl:with-param>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:call-template name="input-field">
		      			<xsl:with-param name="label">XSL_DEFAULT_REFERENCE</xsl:with-param>
		       			<xsl:with-param name="value">
				    		<xsl:for-each select="bank/customer_reference">
				    			<xsl:variable name="default"><xsl:value-of select="default_reference"/></xsl:variable>
				    			<xsl:variable name="ref"><xsl:value-of select="reference"/></xsl:variable>
				    			<xsl:if test="$default = 'Y'">
				    				<xsl:value-of select="utils:decryptApplicantReference($ref)"/>
				    			</xsl:if>
				    		</xsl:for-each>
				    	</xsl:with-param>
		    		</xsl:call-template>
				</xsl:otherwise>
			</xsl:choose>
			</xsl:if>

			
	      </div>
   		</xsl:with-param>
   	</xsl:call-template>
  </xsl:template>
  
  <!--  System Settings Template -->	
<xsl:template name="system-settings">
	<xsl:param name="node-name">ibft_cnaps_code</xsl:param>
 	<xsl:param name="label">XSL_ENTITY_IBFT_CNAPS</xsl:param>
 	<xsl:param name="node-name-2">ibft_bulk_cnaps_code</xsl:param>
 	<xsl:param name="label-2">XSL_ENTITY_BULK_BFT_CNAPS</xsl:param>
  	<xsl:param name="first-value">01</xsl:param> <!-- Value of the first radio button -->
  	<xsl:param name="second-value">02</xsl:param> <!-- Value of the second radio button -->
  	<xsl:param name="enabled-label">XSL_ENABLE</xsl:param>
  	<xsl:param name="disabled-label">XSL_DISABLE</xsl:param>
  	<xsl:param name="is-counterparty">false</xsl:param>
  	
  	<xsl:call-template name="fieldset-wrapper">
   		<xsl:with-param name="legend">XSL_ENTITY_SYSTEM_SETTINGS</xsl:with-param>
   		<xsl:with-param name="content">
   		   <xsl:call-template name="multichoice-field">
     			 <xsl:with-param name="type">checkbox</xsl:with-param>
      			 <xsl:with-param name="label">XSL_ENTITY_AUTH_OWN_TNX</xsl:with-param>
  	  			 <xsl:with-param name="name">authorize_own_transaction</xsl:with-param>
     		</xsl:call-template>
     		<div>
	      		<xsl:if test="$is-counterparty = 'true'">
		      		<xsl:attribute name="style">display:none</xsl:attribute>
		      	</xsl:if>
	     		<xsl:call-template name="multichoice-field">
	     			 <xsl:with-param name="type">checkbox</xsl:with-param>
	      			 <xsl:with-param name="label">XSL_ENTITY_BULK_AUTH_LIMIT</xsl:with-param>
	  	  			 <xsl:with-param name="name">bulk_authorize_limit</xsl:with-param>
	     		</xsl:call-template>
	    		<xsl:call-template name="multichoice-field">
	     			 <xsl:with-param name="type">checkbox</xsl:with-param>
	      			 <xsl:with-param name="label">XSL_ENTITY_AUTO_FORWARD_DATE</xsl:with-param>
	  	  			 <xsl:with-param name="name">auto_fwd_date</xsl:with-param>
	     		 </xsl:call-template>
	     		 <xsl:call-template name="file-upload-settings"></xsl:call-template>
     		 </div>
		</xsl:with-param>
   	</xsl:call-template>
</xsl:template>	
  
  <!-- Liquidity Settings  Template-->
  
	  <xsl:template name="liquidity-settings">	
	  	<xsl:param name="is-counterparty">false</xsl:param>  	
	  		<xsl:call-template name="fieldset-wrapper">
	   		<xsl:with-param name="legend">XSL_HEADER_LIQUIDITY_SETTINGS</xsl:with-param>
	   		<xsl:with-param name="content">
	   		<!-- <xsl:call-template name="liquidity-pooling"/> --><!-- MPSSC-12341 KTP Cleanup -->
	   		</xsl:with-param>   		
	  	</xsl:call-template>
	</xsl:template>	

	<xsl:template name="liquidity-pooling">		
  		<xsl:param name="is-counterparty">false</xsl:param> 	
		  	<xsl:call-template name="fieldset-wrapper">
	   		<xsl:with-param name="legend">XSL_HEADER_POOLING</xsl:with-param>
	   		<xsl:with-param name="legend-type">intended-header</xsl:with-param>
	   		<xsl:with-param name="content">
			<xsl:choose>
				<xsl:when test="liquidity_setting">
				<xsl:variable name="frequencyCount"><xsl:value-of select="count(liquidity_setting/liquidity_frequency)"/></xsl:variable>
				<xsl:variable name="baltypeCount"><xsl:value-of select="count(liquidity_setting/liquidity_balance_type)"/></xsl:variable>
				<script>
				dojo.ready(function(){
						misys._config = (misys._config) || {};
		
						misys._config.liquidity_frequency_record_count = misys._config.liquidity_frequency_record_count || <xsl:value-of select="$frequencyCount"></xsl:value-of>,
						
						misys._config.liquidity_balance_type_count = misys._config.liquidity_balance_type_count || <xsl:value-of select="$baltypeCount"></xsl:value-of>,
						
						
						dojo.mixin(misys._config,{  
								
								frequencyIdArray : new Array(),  
								
								balTypeIdArray : new Array(),   
																	
								frequencyIdArray : [
											<xsl:for-each select="liquidity_setting/liquidity_frequency">
												<xsl:value-of select="liquidity_frequency_code"></xsl:value-of><xsl:if test="position()!=last()">,</xsl:if>
											</xsl:for-each>
								],
								
								balTypeIdArray	:	[
											<xsl:for-each select="liquidity_setting/liquidity_balance_type">
												<xsl:value-of select="liquidity_balance_type_code"></xsl:value-of><xsl:if test="position()!=last()">,</xsl:if>
											</xsl:for-each>
								
								]
								
						});
								
					});
				
				</script>
				<div id='frequency_list'>
					<div id="userAccountsTableHeaderContainer" style="width:100%;">
						<div class="userAccountsTableCell userAccountsTableCellHeader  userAccountsHeaderSelector">
							<xsl:choose>
							    <xsl:when test="$displaymode='edit'">
							      <xsl:call-template name="column-check-box">
										<xsl:with-param name="id">frequency_select_all</xsl:with-param>
								  </xsl:call-template>
							    </xsl:when>
							    <xsl:otherwise>
							     	<p class="hide">auto</p>
							    </xsl:otherwise>
						   </xsl:choose>
						 </div>
						 <div class="userAccountsTableCell userAccountsTableCellHeader  userAccountColumnCell" >
								<xsl:attribute name="style">width:95%;</xsl:attribute>
								<xsl:value-of select="localization:getGTPString($language, 'XSL_LIQUIDITY_FREQUENCY')"/>
						</div>
					</div>	
					<xsl:for-each select="liquidity_setting/liquidity_frequency">
					<div style="width:100%;">
						<div class="userAccountsTableCell userAccountsTableCellOdd alignCenterWithPadding userAccountsHeaderSelector">
							<xsl:call-template name="column-check-box">
								<xsl:with-param name="id">frequency_<xsl:value-of select="liquidity_frequency_code"/></xsl:with-param>
								<xsl:with-param name="checked">
									<xsl:choose>
										<xsl:when test = "checked[.= 'Y']">Y</xsl:when>
										<xsl:otherwise>N</xsl:otherwise>
									</xsl:choose>
								</xsl:with-param>
								<xsl:with-param name="disabled">
									<xsl:choose>
										<xsl:when test="$displaymode='view'">Y</xsl:when>
										<xsl:otherwise>N</xsl:otherwise>
									</xsl:choose>
								</xsl:with-param>
							</xsl:call-template>
						</div>
						<div class="userAccountsTableCell userAccountsTableCellOdd alignCenterWithPadding">
						<xsl:attribute name="style">width:95%;</xsl:attribute>
							<xsl:value-of select="liquidity_frequency_desc"/>
						</div>					
					</div>					
					</xsl:for-each>					
				</div>
				
				<div id='balance_type_list'>
					<div id="userAccountsTableHeaderContainer" style="width:100%;">
						<div class="userAccountsTableCell userAccountsTableCellHeader  userAccountsHeaderSelector">
							<xsl:choose>
							    <xsl:when test="$displaymode='edit'">
							      <xsl:call-template name="column-check-box">
										<xsl:with-param name="id">balance_type_select_all</xsl:with-param>
								  </xsl:call-template>
							    </xsl:when>
							    <xsl:otherwise>
							     	<p class="hide">auto</p>
							    </xsl:otherwise>
						   </xsl:choose>
						 </div>
						 <div class="userAccountsTableCell userAccountsTableCellHeader  userAccountColumnCell" >
								<xsl:attribute name="style">width:95%;</xsl:attribute>
								<xsl:value-of select="localization:getGTPString($language, 'XSL_LIQUIDITY_BALANCE_TYPE')"/>
						</div>
					</div>	
					<xsl:for-each select="liquidity_setting/liquidity_balance_type">
					<div style="width:100%;">
						<div class="userAccountsTableCell userAccountsTableCellOdd alignCenterWithPadding userAccountsHeaderSelector">
							<xsl:call-template name="column-check-box">
								<xsl:with-param name="id">balance_type_<xsl:value-of select="liquidity_balance_type_code"/></xsl:with-param>
								<xsl:with-param name="checked">
									<xsl:choose>
										<xsl:when test = "checked[.= 'Y']">Y</xsl:when>
										<xsl:otherwise>N</xsl:otherwise>
									</xsl:choose>
								</xsl:with-param>
								<xsl:with-param name="disabled">
									<xsl:choose>
										<xsl:when test="$displaymode='view'">Y</xsl:when>
										<xsl:otherwise>N</xsl:otherwise>
									</xsl:choose>
								</xsl:with-param>
							</xsl:call-template>
						</div>
						<div class="userAccountsTableCell userAccountsTableCellOdd alignCenterWithPadding">
						<xsl:attribute name="style">width:95%;</xsl:attribute>
							<xsl:value-of select="liquidity_balance_type_desc"/>
						</div>					
					</div>					
					</xsl:for-each>					
				</div>
			</xsl:when>
		</xsl:choose>
	    	<div>&nbsp;</div>	
	    		<!-- Selection of the currency -->
	    		<div class="widgetContainer">
		    		<xsl:call-template name="input-field">
				  		   <xsl:with-param name="button-type">currency</xsl:with-param>
				    	   <xsl:with-param name="label">XSL_LIQUIDITY_CURRENCY</xsl:with-param>
				     	   <xsl:with-param name="name">liquidity_ccy_cur_code</xsl:with-param>
				     	   <xsl:with-param name="override-product-code">liquidity_ccy</xsl:with-param>
				     	   <xsl:with-param name="appendClass">inlineBlock</xsl:with-param>
				     	   <xsl:with-param name="size">3</xsl:with-param>
				     	   <xsl:with-param name="fieldsize">x-small</xsl:with-param>
				     	   <xsl:with-param name="maxsize">3</xsl:with-param>
				     	   <xsl:with-param name="required">N</xsl:with-param>
				           <xsl:with-param name="uppercase">Y</xsl:with-param>
				  	</xsl:call-template>
				  	
			  	</div>
			</xsl:with-param>
	  	</xsl:call-template>
	</xsl:template>

	<!-- Template for control settings -->
	<xsl:template name="control-settings">
		<xsl:param name="node-name">dual_control</xsl:param>
		<xsl:param name="label">XSL_COMPANY_DUAL_CONTROL</xsl:param>
		<xsl:param name="first-value">01</xsl:param> <!-- Value of the first radio button -->
		<xsl:param name="second-value">02</xsl:param> <!-- Value of the second radio button -->
		<xsl:param name="enabled-label">XSL_DUAL_CONTROL_ENABLE</xsl:param>
		<xsl:param name="disabled-label">XSL_DUAL_CONTROL_DISABLE</xsl:param>
		<xsl:param name="is-counterparty">false</xsl:param>
  
 
		<xsl:call-template name="fieldset-wrapper">
			<xsl:with-param name="legend">XSL_HEADER_CONTROL_SETTINGS</xsl:with-param>
			<xsl:with-param name="content">
				<div>
		      		<xsl:if test="$is-counterparty = 'true'">
			      		<xsl:attribute name="style">display:none</xsl:attribute>
			      	</xsl:if>
					<xsl:call-template name="multioption-inline-wrapper">
						<xsl:with-param name="group-label" select="$label"/>
						<xsl:with-param name="content">
							<xsl:call-template name="multichoice-field">
								<xsl:with-param name="group-label" select="$label"/>
								<xsl:with-param name="label" select="$enabled-label"/>
								<xsl:with-param name="name" select="$node-name"/>
								<xsl:with-param name="id"><xsl:value-of select="$node-name"/>_1</xsl:with-param>
								<xsl:with-param name="value" select="$first-value"/>
								<xsl:with-param name="checked"><xsl:if test="dual_control[. = $first-value]">Y</xsl:if></xsl:with-param>
								<xsl:with-param name="type">radiobutton</xsl:with-param>
								<xsl:with-param name="required">Y</xsl:with-param>
								<xsl:with-param name="inline">Y</xsl:with-param>
							</xsl:call-template>
						
							<xsl:call-template name="multichoice-field">
								<xsl:with-param name="group-label" select="$label"/>
								<xsl:with-param name="label" select="$disabled-label"/>
								<xsl:with-param name="name" select="$node-name"/>
								<xsl:with-param name="id"><xsl:value-of select="$node-name"/>_2</xsl:with-param>
								<xsl:with-param name="value" select="$second-value"/>
								<xsl:with-param name="checked"><xsl:if test="dual_control[. = $second-value]">Y</xsl:if></xsl:with-param>
								<xsl:with-param name="type">radiobutton</xsl:with-param>
								<xsl:with-param name="required">Y</xsl:with-param>
								<xsl:with-param name="inline">Y</xsl:with-param>
							</xsl:call-template>
						</xsl:with-param>
					</xsl:call-template>
				</div>
						    	
			    <xsl:variable name="defaultCustomerStatus"><xsl:value-of select="defaultresource:getResource('DEFAULT_CUSTOMER_STATUS')"/></xsl:variable>
			   	<xsl:variable name="defaultCustomerStatusFlag">
			   		<xsl:choose>
			   		<xsl:when test="$defaultCustomerStatus = 'active' or $defaultCustomerStatus = 'ACTIVE'">A</xsl:when>
			   		<xsl:otherwise>I</xsl:otherwise>
			   		</xsl:choose>
			   	</xsl:variable>
			   	<xsl:variable name="customerStatusAcess"><xsl:value-of select="defaultresource:getResource('NEW_CUSTOMER_STATUS_ENABLED')"/></xsl:variable>
			   	<xsl:variable name="customerStatusAccessFlag">
			   		<xsl:choose>
			   		<xsl:when test="$customerStatusAcess = 'true' or $customerStatusAcess = 'TRUE'">N</xsl:when>
			   		<xsl:otherwise>Y</xsl:otherwise>
			   		</xsl:choose>
				</xsl:variable>
				<xsl:call-template name="select-field">
					<xsl:with-param name="label">XSL_JURISDICTION_ACTIVE_LABEL</xsl:with-param>
					<xsl:with-param name="name">actv_flag</xsl:with-param>	
					<xsl:with-param name="fieldsize">small</xsl:with-param>
					<xsl:with-param name="required">Y</xsl:with-param>
					<xsl:with-param name="value">
				    	  <xsl:choose>
					           <xsl:when test="abbv_name[.!='']"><xsl:value-of select="actv_flag"/></xsl:when>
					           <xsl:otherwise><xsl:value-of select="$defaultCustomerStatusFlag"/></xsl:otherwise>
				          </xsl:choose>
			         </xsl:with-param>
					<xsl:with-param name="readonly"><xsl:value-of select="$customerStatusAccessFlag"/></xsl:with-param>
					<xsl:with-param name="options">
				<xsl:call-template name="actv_flag-options"/>
			</xsl:with-param>
		</xsl:call-template>
		    <xsl:call-template name="input-field">
		    	<xsl:with-param name="label">XSL_PASSWORD_EXPIRY</xsl:with-param>
		      	<xsl:with-param name="name">password_expiry</xsl:with-param>
		      	<xsl:with-param name="size">3</xsl:with-param>
		       	<xsl:with-param name="maxsize">3</xsl:with-param>
		       	<xsl:with-param name="override-constraints">{min:0,places:0}</xsl:with-param>
		       	<xsl:with-param name="type">number</xsl:with-param>
		       	<xsl:with-param name="fieldsize">x-small</xsl:with-param>
			</xsl:call-template>
			<xsl:call-template name="input-field">
				<xsl:with-param name="label">XSL_ATTACHMENT_MAX_UPLOAD_SIZE</xsl:with-param>
				<xsl:with-param name="name">attachment_max_upload_size</xsl:with-param>
				<xsl:with-param name="size">3</xsl:with-param>
				<xsl:with-param name="maxsize">2</xsl:with-param>
				<xsl:with-param name="override-constraints">{min:1,places:0}</xsl:with-param>
				<xsl:with-param name="type">number</xsl:with-param>
				<xsl:with-param name="fieldsize">x-small</xsl:with-param>
			</xsl:call-template>
			<xsl:call-template name="select-field">
				<xsl:with-param name="label">XSL_RETENTION_PERIOD</xsl:with-param>
				<xsl:with-param name="name">retention_period</xsl:with-param>
				<xsl:with-param name="fieldsize">x-small</xsl:with-param>
				<xsl:with-param name="value"><xsl:value-of select="retention_period"/></xsl:with-param>
				<xsl:with-param name="options">
					<xsl:call-template name="retention-period-options"/>
				</xsl:with-param>
			</xsl:call-template>
		</xsl:with-param>
		</xsl:call-template>
	</xsl:template>

    <!--
    Status type options.
   -->
  <xsl:template name="actv_flag-options">
   <xsl:choose>
    <xsl:when test="$displaymode='edit'">
     <option value="A">
       	<xsl:value-of select="localization:getGTPString($language, 'XSL_JURISDICTION_ACTIVE_YES')"/>
     </option>
     <option value="I">
      	<xsl:value-of select="localization:getGTPString($language, 'XSL_JURISDICTION_ACTIVE_NO')"/>
     </option>
    </xsl:when>
    <xsl:otherwise>
      	<xsl:if test="actv_flag[. = 'A']"><xsl:value-of select="localization:getGTPString($language, 'XSL_JURISDICTION_ACTIVE_YES')"/></xsl:if>
      	<xsl:if test="actv_flag[. = 'I']"><xsl:value-of select="localization:getGTPString($language, 'XSL_JURISDICTION_ACTIVE_NO')"/></xsl:if>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:template>
  <!-- Retention Period options -->
  <xsl:template name="retention-period-options">
   <xsl:choose>
    <xsl:when test="$displaymode='edit'">
   
     <option value="6">6</option>
     <option value="9">9</option>
      <option value="12">12</option>
    </xsl:when>
    <xsl:otherwise>
      	<xsl:if test="retention_period[. = '9']">9</xsl:if>
      	<xsl:if test="retention_period[. = '12']">12</xsl:if>
      	<xsl:if test="retention_period[. = '6']">6</xsl:if>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:template>


 <!-- 
  Realform
  -->
 <xsl:template name="realform">
  <!-- Do not display this section when the counterparty mode is 'counterparty' -->
  <xsl:if test="$collaborationmode != 'counterparty'">
  <xsl:call-template name="form-wrapper">
   <xsl:with-param name="name">realform</xsl:with-param>
   <xsl:with-param name="method">POST</xsl:with-param>
   <xsl:with-param name="action"><xsl:value-of select="$contextPath"/><xsl:value-of select="$servletPath"/>/screen/<xsl:value-of select="$nextscreen"/></xsl:with-param>
    <xsl:with-param name="content">
     <div class="widgetContainer">
      <xsl:call-template name="hidden-field">
       <xsl:with-param name="name">operation</xsl:with-param>
       <xsl:with-param name="id">realform_operation</xsl:with-param>
       <xsl:with-param name="value" select="$operation"></xsl:with-param>
      </xsl:call-template>
      <xsl:call-template name="hidden-field">
       <xsl:with-param name="name">option</xsl:with-param>
       <xsl:with-param name="value"><xsl:value-of select="$option"/></xsl:with-param>
      </xsl:call-template>
      <xsl:call-template name="hidden-field">
       <xsl:with-param name="name">TransactionData</xsl:with-param>
      </xsl:call-template>
      <xsl:if test="company_id[.!='']">
      	<xsl:call-template name="hidden-field">
       		<xsl:with-param name="name">featureid</xsl:with-param>
       		<xsl:with-param name="value"><xsl:value-of select="abbv_name"/></xsl:with-param>
      	</xsl:call-template>
      </xsl:if>
      <xsl:call-template name="hidden-field">
       	<xsl:with-param name="name">token</xsl:with-param>
       	<xsl:with-param name="value"><xsl:value-of select="$token"/></xsl:with-param>
      </xsl:call-template>
      <xsl:call-template name="hidden-field">
       	<xsl:with-param name="name">processdttm</xsl:with-param>
       	<xsl:with-param name="value"><xsl:value-of select="$processdttm"/></xsl:with-param>
      </xsl:call-template>
      <xsl:call-template name="hidden-field">
       	<xsl:with-param name="name">mode</xsl:with-param>
       	<xsl:with-param name="value"><xsl:value-of select="$draftMode"/></xsl:with-param>
      </xsl:call-template>
      <!-- <xsl:call-template name="e2ee_transaction"/> -->
     </div>
    </xsl:with-param>
   </xsl:call-template>
   </xsl:if>
  </xsl:template>
  
  <!-- Template to have the list the "Internat Content Provider" or the "News Feed" -->
  <xsl:template match="channel">
	<option>
		<xsl:if test="@selected = 'true'">
			<xsl:attribute name="selected">true</xsl:attribute>
		</xsl:if>
		<xsl:attribute name="value"><xsl:value-of select="id"/></xsl:attribute>
		<xsl:value-of select="name"/>
	</option>
  </xsl:template>

 <!-- =========================================================================== -->
 <!-- ======================== Template STATIC COMPANY  ========================= -->
 <!-- =========================================================================== -->
 <xsl:template name="company-roles">
 <xsl:call-template name="fieldset-wrapper">
  <xsl:with-param name="legend">XSL_HEADER_COMPANY_ROLES</xsl:with-param>
  <xsl:with-param name="content">
   <xsl:apply-templates select="group_record" mode="role_input">
	<xsl:with-param name="dest">03</xsl:with-param>
	<xsl:with-param name="dest_bis">*</xsl:with-param>
	<xsl:with-param name="type">01</xsl:with-param>
   </xsl:apply-templates>	
   <!-- 
	 Header for authorisation roles: we now automatically give
 	 all available authorisation levels: this is simulated by hiding
 	 the div and automatically defaulting the authorised levels with
 	 the option give_all=Y
   -->
   <div style="display:none">
   <xsl:call-template name="fieldset-wrapper">
	<xsl:with-param name="legend">XSL_HEADER_LEVELS</xsl:with-param>
	<xsl:with-param name="content">
     <xsl:apply-templates select="group_record" mode="authorisation_input">
	  <xsl:with-param name="dest">03</xsl:with-param>
	  <xsl:with-param name="dest_bis">*</xsl:with-param>
	  <xsl:with-param name="type">02</xsl:with-param>
	  <xsl:with-param name="give_all">Y</xsl:with-param>
	 </xsl:apply-templates>
	</xsl:with-param>
   </xsl:call-template>
   </div>	 	
  </xsl:with-param>
 </xsl:call-template>	
 </xsl:template>
  <!-- =========================================================================== -->
 <!-- ======================== Template Entity Role ========================= -->
 <!-- =========================================================================== -->
  <xsl:template name="entity-roles">
  <xsl:call-template name="fieldset-wrapper">
  <xsl:with-param name="legend">XSL_HEADER_ENTITY_ROLES</xsl:with-param>
  <xsl:with-param name="content">			
	<xsl:apply-templates select="group_record" mode="role_input">
     <xsl:with-param name="dest">04</xsl:with-param>
	 <xsl:with-param name="dest_bis">*</xsl:with-param>
	 <xsl:with-param name="type">01</xsl:with-param>
	</xsl:apply-templates>
   					
<!--	 Header for authorisation roles: we now automatically give-->
<!-- 		all available authorisation levels: this is simulated by hidding-->
<!-- 		the div and automatically defaulting the authorised levels with-->
<!-- 		the option give_all=Y -->
    <div style="display:none">
     <xsl:call-template name="fieldset-wrapper">
	  <xsl:with-param name="legend">XSL_HEADER_AVAILABLE_ROLES</xsl:with-param>
	  <xsl:with-param name="content">
	   <xsl:apply-templates select="group_record" mode="authorisation_input">
	   <xsl:with-param name="dest">04</xsl:with-param>
		<xsl:with-param name="dest_bis">*</xsl:with-param>
		<xsl:with-param name="type">02</xsl:with-param>
		<xsl:with-param name="give_all">Y</xsl:with-param>
	   </xsl:apply-templates>
   	  </xsl:with-param>
   	</xsl:call-template>
   </div>
  </xsl:with-param>
 </xsl:call-template>
</xsl:template>

<!-- Charging account options -->
 <xsl:template name="charge-account-options">
<xsl:param name="items"/>
   <xsl:choose>
    <xsl:when test="$displaymode='edit' and count($items) >= 0">
    <xsl:for-each select="$items">
	 <xsl:variable name="account" select="."/>
	 	<xsl:choose>
	 		<xsl:when test="$account/owner_type[.='10']">
	 		<!-- SKIP TREASURY ACCOUNTS AS CHARGING ACCOUNTS (SETA, CN)-->
	 		</xsl:when>
	 		<xsl:otherwise>
	 			<option>
	 				<xsl:choose>
				     	<xsl:when test="/static_company/owner_id='2'">
				     		<xsl:attribute name="value"><xsl:value-of select="$account/account_no"/></xsl:attribute>
				     		<xsl:value-of select="concat($account/account_no, ' (',$account/bank_name,')')"></xsl:value-of>
				     	</xsl:when>
				     	<xsl:otherwise>
				     		<xsl:attribute name="value"><xsl:value-of select="$account/account_no"/></xsl:attribute>
				     		<xsl:value-of select="$account/account_no"></xsl:value-of>
				     	</xsl:otherwise>
			     	</xsl:choose>
		     	</option>
	 		</xsl:otherwise>
	 	</xsl:choose>
     </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
        <xsl:value-of select="charge_account"></xsl:value-of>
    </xsl:otherwise>
   </xsl:choose>
</xsl:template> 
 
 
 
 <!-- =========================================================================== -->
 <!-- ======================== Template Attached Banks ========================= -->
 <!-- =========================================================================== -->
 <xsl:template name="bankcompany-details">
  <xsl:call-template name="fieldset-wrapper">
   <xsl:with-param name="legend">XSL_HEADER_ATTACHED_BANKS</xsl:with-param>
   <xsl:with-param name="content">
   	<div style="text-align:center">
   	 <xsl:if test="$displaymode = 'edit'">
   	  <xsl:attribute name="class">collapse-label</xsl:attribute>
   	 </xsl:if>
   	 <xsl:if test="$displaymode='edit'">
      <xsl:call-template name="select-field">
       <xsl:with-param name="name"></xsl:with-param>
       <xsl:with-param name="id">avail_bank_list_nosend</xsl:with-param>
       <xsl:with-param name="type">multiple</xsl:with-param>
       <xsl:with-param name="size">10</xsl:with-param>
       <xsl:with-param name="options">
        <xsl:choose>
	     <xsl:when test="$displaymode='edit'">
	      <xsl:apply-templates select="avail_desc_record" mode="input_bankcompany"/>
	     </xsl:when>
	     <xsl:otherwise>
	      <ul>
	       <xsl:apply-templates select="avail_desc_record" mode="input_bankcompany"/>
	      </ul>
	     </xsl:otherwise>
	    </xsl:choose>
       </xsl:with-param>
      </xsl:call-template>
      <div id="add-remove-banks" class="multiselect-buttons">
       <button dojoType="dijit.form.Button" type="button" id="add_bank"><xsl:value-of select="localization:getGTPString($language, 'XSL_ACTION_ADD')" />&nbsp;&#8595;</button>
       <button dojoType="dijit.form.Button" type="button" id="remove_bank"><xsl:value-of select="localization:getGTPString($language, 'XSL_ACTION_REMOVE')" />&nbsp;&#8593;</button>
      </div>
     </xsl:if>
      <xsl:call-template name="select-field">
       <xsl:with-param name="name">bank_list</xsl:with-param>
       <xsl:with-param name="type">multiple</xsl:with-param>
       <xsl:with-param name="size">10</xsl:with-param>
       <xsl:with-param name="options">
        <xsl:choose>
	     <xsl:when test="$displaymode='edit'">
	      <xsl:apply-templates select="bank_desc_record" mode="input_bankcompany"/>
	     </xsl:when>
	     <xsl:otherwise>
	      <ul class="multi-select">
	       <xsl:apply-templates select="bank_desc_record" mode="input_bankcompany"/>
	      </ul>
	     </xsl:otherwise>
	    </xsl:choose>
       </xsl:with-param>
      </xsl:call-template>
     </div>
 	</xsl:with-param>
 	</xsl:call-template>
 </xsl:template>
 
  <!-- Template for Bank Description (whether already given or still available) in Input Mode -->
  <xsl:template match="bank_desc_record | avail_desc_record" mode="input_bankcompany">
   <xsl:choose>
    <xsl:when test="$displaymode='edit'">
     <option>
	  <xsl:attribute name="value"><xsl:value-of select="abbv_name"/> (<xsl:value-of select="name"/>)</xsl:attribute>
	  <xsl:value-of select="abbv_name"/> (<xsl:value-of select="name"/>)
	 </option>
    </xsl:when>
    <xsl:otherwise>
	 <xsl:if test="abbv_name[.!=''] and name[.!='']">
      <li><xsl:value-of select="abbv_name"/> (<xsl:value-of select="name"/>)</li>
     </xsl:if>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:template>
   <xsl:template name="display-dates">
   <xsl:call-template name="column-container">
           <xsl:with-param name="content">
              <xsl:call-template name="column-wrapper">
                  <xsl:with-param name="content">
                  <xsl:call-template name="input-field">
                      <xsl:with-param name="label">XSL_CREATION_DATE</xsl:with-param>
                      <xsl:with-param name="name">creation_date</xsl:with-param>
                      <xsl:with-param name="type">date</xsl:with-param>
                      <xsl:with-param name="fieldsize">medium</xsl:with-param>
                      <xsl:with-param name="readonly">Y</xsl:with-param>
                      <xsl:with-param name="required">N</xsl:with-param>
                      <xsl:with-param name="override-displaymode">view</xsl:with-param>
                      </xsl:call-template>
                    </xsl:with-param>
             </xsl:call-template>
             <xsl:call-template name="column-wrapper">
               <xsl:with-param name="content">
               <xsl:call-template name="input-field">
                      <xsl:with-param name="label">XSL_AMMEND_DATE</xsl:with-param>
                  	  <xsl:with-param name="name">amend_date</xsl:with-param>
                      <xsl:with-param name="type">date</xsl:with-param>
                      <xsl:with-param name="fieldsize">medium</xsl:with-param>
                      <xsl:with-param name="readonly">Y</xsl:with-param>
                      <xsl:with-param name="required">N</xsl:with-param>
                      <xsl:with-param name="override-displaymode">view</xsl:with-param>
                    </xsl:call-template>
                  </xsl:with-param>
           </xsl:call-template>
           </xsl:with-param>
        </xsl:call-template>
   </xsl:template>
 <!-- Legal Id Type Options -->
  <xsl:template name="legal-id-types">
   <xsl:choose>
    <xsl:when test="$displaymode='edit'">
    <option>
            <xsl:attribute name="value"></xsl:attribute>
    </option>
     <xsl:for-each select="legal_types/legal_id_type">
     	<option>
     		<xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
     	    <xsl:value-of select="."></xsl:value-of>
     	</option>
     </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
        <xsl:value-of select="legal_id_type"></xsl:value-of>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:template>
  <!--  Charge Account address fields -->
  	<xsl:template name="charge-account-addresses">
    <xsl:variable name="customerProfileChargeAccountEnabledAndMandatory" select="defaultresource:getResource('CUSTOMER_PROFILE_CHARGE_ACCOUNT_MANDATORY')"></xsl:variable>
     <xsl:variable name ="chargeAccountAddressRequired">
       <xsl:choose>
        <xsl:when test="$customerProfileChargeAccountEnabledAndMandatory = 'true' and $isCounterparty != 'true' ">
			<xsl:value-of select="'Y'"></xsl:value-of>
	    </xsl:when>
		<xsl:otherwise>	
		   <xsl:value-of select="'N'"></xsl:value-of>
		</xsl:otherwise>
	   </xsl:choose>
	  </xsl:variable> 
  	<xsl:call-template name="fieldset-wrapper">
  <xsl:with-param name="legend">XSL_ENTITY_CHARGE_ACCOUNT_ADDRESS</xsl:with-param>
      <xsl:with-param name="legend-type">intended-header</xsl:with-param>
      <xsl:with-param name="content">
      <xsl:call-template name="input-field">
    	<xsl:with-param name="label">XSL_JURISDICTION_ADDRESS</xsl:with-param>
    	<xsl:with-param name="name">charge_account_address_line_1</xsl:with-param>
    	<xsl:with-param name="required"><xsl:value-of select="$chargeAccountAddressRequired"/></xsl:with-param>
   	   </xsl:call-template>
   	    <xsl:call-template name="input-field">
    	<xsl:with-param name="name">charge_account_address_line_2</xsl:with-param> 
   	   </xsl:call-template>
   	    <xsl:call-template name="input-field">
    	<xsl:with-param name="name">charge_account_address_line_3</xsl:with-param>	
   	   </xsl:call-template>
   	    <xsl:call-template name="input-field">
    	<xsl:with-param name="name">charge_account_address_line_4</xsl:with-param>
   	   </xsl:call-template>	    
     </xsl:with-param>
  </xsl:call-template>
  </xsl:template>
   <!--  File upload settings -->
   <xsl:template name="file-upload-settings">
   	<xsl:param name="node-name">reject_file_on_error</xsl:param>
 	<xsl:param name="label">XSL_REJECT_FILE_ON_ERROR</xsl:param>
 	<xsl:param name="label-2">XSL_SUCCESS_TNX_ERROR</xsl:param>
  	<xsl:param name="first-value">01</xsl:param> <!-- Value of the first radio button : for reject file on error-->
  	<xsl:param name="second-value">02</xsl:param> <!-- Value of the second radio button: process successfull tnx and reject errors -->
  	<xsl:param name="group-label">XSL_NON_AMMENDABLE_FILE_TYPE</xsl:param>
  	<!-- For non ammendable file types -->
  	<xsl:param name="node-name-1">bulk_draft_on_error</xsl:param>
 	<xsl:param name="label-3">XSL_DRAFT_ON_ERROR</xsl:param>
 	<xsl:param name="label-4">XSL_SUCCESS_ERROR_SEPARATELY</xsl:param>
  	<xsl:param name="first-value-2">01</xsl:param> <!-- Value of the first radio button: save draft on error -->
  	<xsl:param name="second-value-2">02</xsl:param><!-- Value of the second radio button: Bulk successfull tnx and tnx with error separately--> 
  	<xsl:param name="group-label-2">XSL_AMMENDABLE_FILE_TYPE</xsl:param>
   	<xsl:call-template name="fieldset-wrapper">
   	<xsl:with-param name="legend">XSL_FILE_UPLOAD_SETTINGS</xsl:with-param>
  	<xsl:with-param name="legend-type">intended-header</xsl:with-param>
   	<xsl:with-param name="content">
   	  	 <xsl:call-template name="multichoice-field">
     		<xsl:with-param name="type">checkbox</xsl:with-param>
       	 	<xsl:with-param name="label">XSL_CHECK_FILE_HASH_VALUE</xsl:with-param>
  	  		<xsl:with-param name="name">check_file_hash_value</xsl:with-param>
   		 </xsl:call-template>
    	 <xsl:call-template name="multichoice-field">
     		<xsl:with-param name="type">checkbox</xsl:with-param>
        	<xsl:with-param name="label">XSL_CHECK_DUPLICATE_FILE</xsl:with-param>
  	  		<xsl:with-param name="name">check_duplicate_file</xsl:with-param>
   		 </xsl:call-template>
    	 <xsl:call-template name="multichoice-field">
     		<xsl:with-param name="type">checkbox</xsl:with-param>
        	<xsl:with-param name="label">XSL_CHECK_DUPLICATE_CUSTOMER_REFERENCE</xsl:with-param>
  	  		<xsl:with-param name="name">check_duplicate_cust_ref</xsl:with-param>
   		 </xsl:call-template>
     	 <xsl:call-template name="input-field">
      		<xsl:with-param name="label">XSL_ENTITY_FILE_ENCRYP_METHOD</xsl:with-param>
      		<xsl:with-param name="name">file_encryption_method</xsl:with-param>
      		<xsl:with-param name="maxsize">20</xsl:with-param>
    	 </xsl:call-template>
    	 <xsl:if test="$cashUnificationEnabled = 'false'">
     	 <xsl:call-template name="multioption-inline-wrapper">
	      <xsl:with-param name="group-label" select="$group-label"/>
	      <xsl:with-param name="content">
		        <xsl:call-template name="multichoice-field">
			      <xsl:with-param name="group-label" select="$label"/>
			      <xsl:with-param name="label" select="$label"/>
			      <xsl:with-param name="name" select="$node-name"/>
			      <xsl:with-param name="id"><xsl:value-of select="$node-name"/></xsl:with-param>
			      <xsl:with-param name="value" select="$first-value"/>
			      <xsl:with-param name="checked"><xsl:if test="reject_file_on_error[. = $first-value]">Y</xsl:if></xsl:with-param>
			      <xsl:with-param name="type">radiobutton</xsl:with-param>
			      <xsl:with-param name="inline">Y</xsl:with-param>
			     </xsl:call-template>
			    
			     <xsl:call-template name="multichoice-field">
			      <xsl:with-param name="group-label" select="$label"/>
			      <xsl:with-param name="label" select="$label-2"/>
			      <xsl:with-param name="name" select="$node-name"/>
			      <xsl:with-param name="id"><xsl:value-of select="$node-name"/>_1</xsl:with-param>
			      <xsl:with-param name="value" select="$second-value"/>
			      <xsl:with-param name="checked"><xsl:if test="reject_file_on_error[. = $second-value]">Y</xsl:if></xsl:with-param>
			      <xsl:with-param name="type">radiobutton</xsl:with-param>
			      <xsl:with-param name="inline">Y</xsl:with-param>
			     </xsl:call-template>
	    	</xsl:with-param>
 		 </xsl:call-template>
 		
 			<xsl:call-template name="multichoice-field">
     			 <xsl:with-param name="type">checkbox</xsl:with-param>
      			 <xsl:with-param name="label">XSL_MERGE_DE-MERGE_ALLOWED</xsl:with-param>
  	  			 <xsl:with-param name="name">merge_demerge_allowed</xsl:with-param>
     		</xsl:call-template>
 		
    	
    	 <xsl:call-template name="multioption-inline-wrapper">
	      <xsl:with-param name="group-label" select="$group-label-2"/>
	      <xsl:with-param name="content">
		        <xsl:call-template name="multichoice-field">
			      <xsl:with-param name="group-label" select="$group-label-2"/>
			      <xsl:with-param name="label" select="$label-3"/>
			      <xsl:with-param name="name" select="$node-name-1"/>
			      <xsl:with-param name="id"><xsl:value-of select="$node-name-1"/></xsl:with-param>
			      <xsl:with-param name="value" select="$first-value-2"/>
			      <xsl:with-param name="checked"><xsl:if test="bulk_draft_on_error[. = $first-value-2]">Y</xsl:if></xsl:with-param>
			      <xsl:with-param name="type">radiobutton</xsl:with-param>
			      <xsl:with-param name="inline">Y</xsl:with-param>
			     </xsl:call-template>

			     <xsl:call-template name="multichoice-field">
			      <xsl:with-param name="group-label" select="$group-label-2"/>
			      <xsl:with-param name="label" select="$label-4"/>
			      <xsl:with-param name="name" select="$node-name-1"/>
			      <xsl:with-param name="id"><xsl:value-of select="$node-name-1"/>_1</xsl:with-param>
			      <xsl:with-param name="value" select="$second-value-2"/>
			      <xsl:with-param name="checked"><xsl:if test="bulk_draft_on_error[. = $second-value-2]">Y</xsl:if></xsl:with-param>
			      <xsl:with-param name="type">radiobutton</xsl:with-param>
			      <xsl:with-param name="inline">Y</xsl:with-param>
			     </xsl:call-template>
	    	</xsl:with-param>
 		 </xsl:call-template>
 		 </xsl:if> 
 	</xsl:with-param>
   </xsl:call-template>
   </xsl:template>
   
   <!-- Account Details -->
   <xsl:template name="account-details">
    <xsl:variable name="customerProfileChargeAccountEnabled" select="defaultresource:getResource('CUSTOMER_PROFILE_CHARGE_ACCOUNT_ENABLED')"></xsl:variable>
     <xsl:variable name="customerProfileChargeAccountEnabledAndMandatory" select="defaultresource:getResource('CUSTOMER_PROFILE_CHARGE_ACCOUNT_MANDATORY')"></xsl:variable>
      <xsl:variable name ="chargeAccountRequired">
       <xsl:choose>
        <xsl:when test="$customerProfileChargeAccountEnabledAndMandatory = 'true' and $isCounterparty != 'true'  ">
			<xsl:value-of select="'Y'"></xsl:value-of>
	    </xsl:when>
		<xsl:otherwise>	
		   <xsl:value-of select="'N'"></xsl:value-of>
		</xsl:otherwise>
	   </xsl:choose>
	  </xsl:variable>    
   <xsl:call-template name="fieldset-wrapper">
   	   <xsl:with-param name="legend">XSL_ENTITY_ACCOUNT_DETAILS</xsl:with-param>
   	   <xsl:with-param name="content">
   	   <div id="account-details-section" style="display:block">
		<xsl:call-template name="build-account-dojo-items">
		<xsl:with-param name="items" select="accounts/account"/>
		</xsl:call-template>
		</div>	
		 <xsl:if test="$customerProfileChargeAccountEnabled = 'true'">
		<div>
		<xsl:call-template name="select-field">
     			<xsl:with-param name="label">XSL_CHARGING_ACCOUNT</xsl:with-param>
     			<xsl:with-param name="name">charge_account</xsl:with-param>
     				<xsl:with-param name="required"><xsl:value-of select="$chargeAccountRequired"/></xsl:with-param>		
     			<xsl:with-param name="options">
     			      <xsl:call-template name="charge-account-options">
     			     	 <xsl:with-param name="items" select="accounts/account"/>
     			      </xsl:call-template>
     			</xsl:with-param> 
     			<xsl:with-param name="value"><xsl:value-of select="charge_account"/></xsl:with-param>			
   		  </xsl:call-template> 
    	</div> 
    	<div>
    	<xsl:call-template name="charge-account-addresses" />	 
    	</div>
    	</xsl:if>	
    	</xsl:with-param>
   	</xsl:call-template>
  </xsl:template>
  
  <!-- ************************************************************************** -->
	<!--                          ACCOUNT - START                                 -->
	<!-- ************************************************************************** -->
	<xsl:template name="build-account-dojo-items">
	<xsl:param name="items"/>
		<div>&nbsp;</div>
		 <div dojoType="misys.system.widget.Accounts" dialogId="account-dialog-template" gridId="accounts-grid" id="accounts">
			<xsl:attribute name="headers">
				<xsl:value-of select="localization:getGTPString($language, 'ACCOUNTNUMBER')"/>,
				<xsl:if test="$companyType = '02' or owner_is_group[.='Y']">
					<xsl:value-of select="localization:getGTPString($language, 'BANK')"/>,
				</xsl:if>
				<xsl:value-of select="localization:getGTPString($language, 'ACCOUNT_OWNER_TYPE')"/>,
				<xsl:value-of select="localization:getGTPString($language, 'ACCOUNTTYPE')"/>,
				<xsl:value-of select="localization:getGTPString($language, 'ACCOUNT_PRODUCT_TYPE')"/>,
				<xsl:value-of select="localization:getGTPString($language, 'ACCOUNTCCY')"/>,
				<xsl:value-of select="localization:getGTPString($language, 'ACCOUNTDESCRIPTION')"/>,
				<xsl:value-of select="localization:getGTPString($language, 'CUST_ACCOUNT_TYPE')"/>,
				<xsl:value-of select="localization:getGTPString($language, 'BANKID')"/>,
				<xsl:value-of select="localization:getGTPString($language, 'BRANCHNO')"/>,
				<xsl:value-of select="localization:getGTPString($language, 'XSL_ENTITY_ACCOUNT_NRA')"/>,
				<xsl:value-of select="localization:getGTPString($language, 'CUST_REFERENCE')"/>,
				<xsl:value-of select="localization:getGTPString($language, 'ACTIVE')"/>
			</xsl:attribute>
			<xsl:if test="$displaymode = 'edit'">
				<xsl:attribute name="dialogAddItemTitle"><xsl:value-of select="localization:getGTPString($language, 'XSL_ENTITY_ADD_ACCOUNT')"/></xsl:attribute>
			</xsl:if>
			<xsl:attribute name="viewMode">
    				<xsl:value-of select="$displaymode"/>
    		</xsl:attribute>
			<xsl:for-each select="$items">
				<xsl:variable name="account" select="."/>
				<xsl:variable name="position" select="position()" />
				<div dojoType="misys.system.widget.Account">
					<!--<xsl:attribute name="id">account_<xsl:value-of select="$position"/></xsl:attribute>
					--><xsl:attribute name="account_number"><xsl:value-of select="$account/account_no"/></xsl:attribute>
					<xsl:attribute name="account_name"><xsl:value-of select="$account/acct_name"/></xsl:attribute>
					<xsl:attribute name="bank_abbv_name"><xsl:value-of select="$account/bank_abbv_name"/></xsl:attribute>
					<xsl:attribute name="type"><xsl:value-of select="$account/bank_account_type"/></xsl:attribute>
					<xsl:attribute name="ccy"><xsl:value-of select="$account/cur_code"/></xsl:attribute>
					<xsl:attribute name="description"><xsl:value-of select="$account/description"/></xsl:attribute>
					<xsl:attribute name="nra"><xsl:value-of select="$account/nra"/></xsl:attribute>
					<xsl:attribute name="account_product_type"><xsl:value-of select="$account/bank_account_product_type"/></xsl:attribute>
					<xsl:attribute name="cust_account_type"><xsl:value-of select="$account/customer_account_type"/></xsl:attribute>
					<xsl:attribute name="bank_id"><xsl:value-of select="$account/bank_id"/></xsl:attribute>
					<xsl:attribute name="branch_code"><xsl:value-of select="$account/branch_no"/></xsl:attribute>
					<xsl:attribute name="account_type"><xsl:value-of select="$account/account_type"/></xsl:attribute>
					<xsl:attribute name="customer_reference"><xsl:value-of select="$account/customer_account_ref"/></xsl:attribute>
					<xsl:attribute name="routing_bic"><xsl:value-of select="$account/routing_bic"/></xsl:attribute>
					<xsl:attribute name="created_dttm"><xsl:value-of select="$account/created_dttm"/></xsl:attribute>
					<xsl:attribute name="actv_flag"><xsl:value-of select="$account/actv_flag"/></xsl:attribute>
					<xsl:attribute name="start_date"><xsl:value-of select="$account/start_date"/></xsl:attribute>
					<xsl:attribute name="end_date"><xsl:value-of select="$account/end_date"/></xsl:attribute>
					<xsl:attribute name="principal_amount"><xsl:value-of select="$account/principal_amount"/></xsl:attribute>
					<xsl:attribute name="maturity_amount"><xsl:value-of select="$account/maturity_amount"/></xsl:attribute>
					<xsl:attribute name="interest_rate_credit"><xsl:value-of select="$account/interest_rate_credit"/></xsl:attribute>
					<xsl:attribute name="interest_rate_debit"><xsl:value-of select="$account/interest_rate_debit"/></xsl:attribute>
					<xsl:attribute name="interest_on_maturity"><xsl:value-of select="$account/interest_on_maturity"/></xsl:attribute>
					<xsl:attribute name="owner_type"><xsl:value-of select="$account/owner_type"/></xsl:attribute>
					<xsl:attribute name="displayed_owner_type"><xsl:value-of select="localization:getDecode($language, 'N081', $account/owner_type)"/></xsl:attribute>
					<xsl:attribute name="settlement_means"><xsl:value-of select="$account/settlement_means"/></xsl:attribute>
					<xsl:attribute name="sweeping_enabled"><xsl:value-of select="$account/sweeping_enabled"/></xsl:attribute>
					<xsl:attribute name="pooling_enabled"><xsl:value-of select="$account/pooling_enabled"/></xsl:attribute>
					<xsl:attribute name="charge_account_for_liq"><xsl:value-of select="$account/charge_account_for_liq"/></xsl:attribute>
					<xsl:attribute name="td_type"><xsl:value-of select="$account/td_type"/></xsl:attribute>
				
				</div>
				
			</xsl:for-each>
		</div> 
	</xsl:template>
	
		<!-- ********* -->
	<!-- Accounts -->
	<!-- ********* -->
	<!-- Dialog Start -->
	<xsl:template name="account-dialog-template">
		<div id="account-dialog-template" style="display:none" class="widgetContainer">
			<xsl:attribute name="title">Confirmation</xsl:attribute>
				<!-- Customer entity -->
				<xsl:call-template name="input-field">
					<xsl:with-param name="label">ACCOUNTNUMBER</xsl:with-param>
					<xsl:with-param name="name">account_number</xsl:with-param>
					<xsl:with-param name="maxsize">34</xsl:with-param>
					<xsl:with-param name="required" >Y</xsl:with-param>
					<xsl:with-param name="regular-expression">^[^&lt;&gt;]*</xsl:with-param>
				</xsl:call-template>
				
				<xsl:if test="$companyType = '02' or owner_is_group[.='Y']">
					<xsl:call-template name="select-field">
	   					<xsl:with-param name="label">BANK</xsl:with-param>
	   					<xsl:with-param name="name">bank_abbv_name</xsl:with-param>
	   					<xsl:with-param name="required">Y</xsl:with-param>
	   					<xsl:with-param name="options">
	   						<xsl:value-of select="bank_abbv_name"/>
	   					</xsl:with-param>
	  				 </xsl:call-template>
  				 </xsl:if>
  				 <xsl:if test="$companyType != '02'">
					<xsl:call-template name="select-field">
	   					<xsl:with-param name="label">ACCOUNTTYPE</xsl:with-param>
	   					<xsl:with-param name="name">bank_account_type</xsl:with-param>
	   					<xsl:with-param name="value"><xsl:value-of select="bank_account_type"/></xsl:with-param>
	   					<xsl:with-param name="required">Y</xsl:with-param>
	   					<xsl:with-param name="options">
		   						<xsl:call-template name="account_types"/>
	   					</xsl:with-param>
	  				 </xsl:call-template>
  				 </xsl:if>
  				 <xsl:if test="$companyType = '02'">
					<xsl:call-template name="select-field">
	   					<xsl:with-param name="label">ACCOUNTTYPE</xsl:with-param>
	   					<xsl:with-param name="name">bank_account_type</xsl:with-param>
	   					<xsl:with-param name="required">Y</xsl:with-param>
	   					<!-- <xsl:with-param name="value"><xsl:value-of select="bank_account_type"/></xsl:with-param> -->
	   					<xsl:with-param name="options">
		   						<xsl:value-of select="bank_account_type"/>
	   					</xsl:with-param>
	  				 </xsl:call-template>
  				 </xsl:if>
  				 <xsl:if test="$companyType != '02'">
	  				 <xsl:call-template name="select-field">
	   					<xsl:with-param name="label">XSL_ACCOUNT_PRODUCT_TYPE</xsl:with-param>
	   					<xsl:with-param name="name">account_product_type</xsl:with-param>
	   					<xsl:with-param name="value"><xsl:value-of select="account_product_type"/></xsl:with-param>
	   					<xsl:with-param name="required">Y</xsl:with-param>
	   					<xsl:with-param name="options">
		   						<xsl:call-template name="account_product_types"/>
	   					</xsl:with-param>
	 				 </xsl:call-template>
 				 </xsl:if>
 				  <xsl:if test="$companyType = '02'">
	  				 <xsl:call-template name="select-field">
	   					<xsl:with-param name="label">XSL_ACCOUNT_PRODUCT_TYPE</xsl:with-param>
	   					<xsl:with-param name="name">account_product_type</xsl:with-param>
	   					<xsl:with-param name="required">Y</xsl:with-param>
	   					<!-- <xsl:with-param name="value"><xsl:value-of select="account_product_type"/></xsl:with-param> -->
	   					<xsl:with-param name="options">
		   						<xsl:value-of select="account_product_type"/>
	   					</xsl:with-param>
	 				 </xsl:call-template>
 				 </xsl:if>
 				 
 				  <xsl:call-template name="select-field">
   					<xsl:with-param name="label">XSL_ACCOUNT_OWNER_TYPE</xsl:with-param>
   					<xsl:with-param name="name">owner_type</xsl:with-param>
   					<xsl:with-param name="value"><xsl:value-of select="owner_type"/></xsl:with-param>
   					<xsl:with-param name="required">Y</xsl:with-param>
   					<xsl:with-param name="options">
			    		<option value="01"><xsl:value-of select="localization:getDecode($language, 'N081', '01')"/></option>
			    		<option value="10"><xsl:value-of select="localization:getDecode($language, 'N081', '10')"/></option>
			    	</xsl:with-param>
 				 </xsl:call-template>
 				 
 				 <xsl:call-template name="hidden-field">
 						  <xsl:with-param name="name">displayed_owner_type</xsl:with-param>
   				 </xsl:call-template>
 				 
				<xsl:call-template name="input-field">
		  		   <xsl:with-param name="button-type">currency</xsl:with-param>
		    	   <xsl:with-param name="label">XSL_JURISDICTION_CURRENCY</xsl:with-param>
		     	   <xsl:with-param name="name">account_ccy_cur_code</xsl:with-param>
		     	   <xsl:with-param name="override-product-code">account_ccy</xsl:with-param>
		     	   <xsl:with-param name="size">3</xsl:with-param>
		     	   <xsl:with-param name="fieldsize">x-small</xsl:with-param>
		     	   <xsl:with-param name="maxsize">3</xsl:with-param>
		     	   <xsl:with-param name="required">Y</xsl:with-param>
		           <xsl:with-param name="uppercase">Y</xsl:with-param>
		  	  	</xsl:call-template>
		  	  	 <xsl:if test="$companyType != '02'">
				 	<xsl:call-template name="select-field">
	  					<xsl:with-param name="label">XSL_CUSTOMER_ACCOUNT_TYPE</xsl:with-param>
	  					<xsl:with-param name="name">cust_account_type</xsl:with-param>
	  					<xsl:with-param name="value"><xsl:value-of select="cust_account_type"/></xsl:with-param>
	  					<xsl:with-param name="required">Y</xsl:with-param>
	  					<xsl:with-param name="options">
	  						<xsl:call-template name="customer_account_types"/>
	  					</xsl:with-param>
					</xsl:call-template>
				</xsl:if>
				<xsl:if test="$companyType = '02'">
				 	<xsl:call-template name="select-field">
	  					<xsl:with-param name="label">XSL_CUSTOMER_ACCOUNT_TYPE</xsl:with-param>
	  					<xsl:with-param name="name">cust_account_type</xsl:with-param>
	  					<xsl:with-param name="required">Y</xsl:with-param>
	  					<xsl:with-param name="options">
	  						<xsl:call-template name="customer_account_types"/>
	  					</xsl:with-param>
					</xsl:call-template>
				</xsl:if>
				<xsl:call-template name="input-field">
					<xsl:with-param name="label">XSL_BANK_ID</xsl:with-param>
					<xsl:with-param name="name">bank_id</xsl:with-param>
					<xsl:with-param name="required" >N</xsl:with-param>
					<xsl:with-param name="maxsize">9</xsl:with-param>
				</xsl:call-template>
				<xsl:call-template name="input-field">
					<xsl:with-param name="label">XSL_BRANCH_NO</xsl:with-param>
					<xsl:with-param name="name">branch_code</xsl:with-param>
					<xsl:with-param name="required" >N</xsl:with-param>
					<xsl:with-param name="maxsize">9</xsl:with-param>
				</xsl:call-template>
  				 	<xsl:call-template name="input-field">
					<xsl:with-param name="label">ACCOUNT_DESCRIPTION</xsl:with-param>
					<xsl:with-param name="name">account_desc</xsl:with-param>
					<xsl:with-param name="readonly">Y</xsl:with-param>
					<xsl:with-param name="required" >Y</xsl:with-param>
					<xsl:with-param name="maxsize">40</xsl:with-param>
				</xsl:call-template>
				<xsl:call-template name="input-field">
       	  			<xsl:with-param name="label">XSL_ROUTING_CODE</xsl:with-param>
            		<xsl:with-param name="name">routing_bic</xsl:with-param>
            		<xsl:with-param name="maxsize">20</xsl:with-param>
        	 	</xsl:call-template>
				<xsl:call-template name="select-field">
   					<xsl:with-param name="label">XSL_GENERALDETAILS_CUST_REF_ID</xsl:with-param>
   					<xsl:with-param name="name">customer_reference</xsl:with-param>
   					<xsl:with-param name="value">
   						<xsl:value-of select="customer_reference"/>
   					</xsl:with-param>
   					<xsl:with-param name="required">Y</xsl:with-param>
 				 </xsl:call-template>
 		     	<xsl:call-template name="input-field">
       	  			<xsl:with-param name="label">XSL_ACTV_FLAG</xsl:with-param>
            		<xsl:with-param name="name">act_actv_flag</xsl:with-param>
            		<xsl:with-param name="maxsize">2</xsl:with-param>
            		<xsl:with-param name="readonly">Y</xsl:with-param>
        	 	</xsl:call-template>
	        	 	<xsl:call-template name="input-field">
		      			 <xsl:with-param name="label">XSL_SWEEPING_ENABLED</xsl:with-param>
		      			 <xsl:with-param name="id">sweeping_enabled</xsl:with-param>
		      			 <xsl:with-param name="value">
		      			 <xsl:choose>
			      			 <xsl:when test="sweeping_enabled[.='Y']"><xsl:value-of select="localization:getGTPString($language, 'XSL_YES')"/></xsl:when>
			      			 <xsl:otherwise><xsl:value-of select="localization:getGTPString($language, 'XSL_NO')"/></xsl:otherwise>
		      			 </xsl:choose>
		      			 </xsl:with-param>
		      			 <xsl:with-param name="disabled">Y</xsl:with-param>
		      			 <xsl:with-param name="override-displaymode">edit</xsl:with-param>
	     			</xsl:call-template>
		     		<xsl:call-template name="input-field">
		      			 <xsl:with-param name="label">XSL_POOLING_ENABLED</xsl:with-param>
		      			 <xsl:with-param name="id">pooling_enabled</xsl:with-param>
		      			 <xsl:with-param name="value">
		      			 <xsl:choose>
			      			 <xsl:when test="pooling_enabled[.='Y']"><xsl:value-of select="localization:getGTPString($language, 'XSL_YES')"/></xsl:when>
			      			 <xsl:otherwise><xsl:value-of select="localization:getGTPString($language, 'XSL_NO')"/></xsl:otherwise>
		      			 </xsl:choose>
		      			 </xsl:with-param>
		      			 <xsl:with-param name="disabled">Y</xsl:with-param>
		      			 <xsl:with-param name="override-displaymode">edit</xsl:with-param>
		     		</xsl:call-template>
		     		<xsl:call-template name="input-field">
		      			 <xsl:with-param name="label">XSL_CHARGE_ACCOUNT_FOR_LIQUIDITY</xsl:with-param>
		      			 <xsl:with-param name="id">charge_account_for_liq</xsl:with-param>
		      			 <xsl:with-param name="value">
		      			 <xsl:choose>
			      			 <xsl:when test="charge_account_for_liq[.='Y']"><xsl:value-of select="localization:getGTPString($language, 'XSL_YES')"/></xsl:when>
			      			 <xsl:otherwise><xsl:value-of select="localization:getGTPString($language, 'XSL_NO')"/></xsl:otherwise>
		      			 </xsl:choose>
		      			 </xsl:with-param>
		      			 <xsl:with-param name="disabled">Y</xsl:with-param>
		      			 <xsl:with-param name="override-displaymode">edit</xsl:with-param>
		     		</xsl:call-template> 
				<xsl:call-template name="multichoice-field">
    			 		<xsl:with-param name="type">checkbox</xsl:with-param>
     				 	<xsl:with-param name="label">XSL_ENTITY_ACCOUNT_NRA</xsl:with-param>
 	  					 <xsl:with-param name="name">account_nra</xsl:with-param>
    				 </xsl:call-template>
    				 <xsl:call-template name="hidden-field">
 						  <xsl:with-param name="name">account_type</xsl:with-param>
   				 </xsl:call-template>
   				 <xsl:call-template name="hidden-field">
 						  <xsl:with-param name="name">bank_previous_account_type</xsl:with-param>
 						  <xsl:with-param name="value"><xsl:value-of select="bank_account_type"/></xsl:with-param>
   				 </xsl:call-template>
   				 <div class="dijitDialogPaneActionBar">
					<xsl:call-template name="label-wrapper">
						<xsl:with-param name="content">
							<button dojoType="dijit.form.Button" type="button" id="accountOkButton">
								<xsl:attribute name="onClick">misys.fncValidateAccountPopup();</xsl:attribute>
								<xsl:value-of select="localization:getGTPString($language, 'XSL_SYSTEMFEATURES_OK')"/>
							</button>
							<button dojoType="dijit.form.Button" type="button" id="accountCancelButton">
								<xsl:attribute name="onClick">dijit.byId('account-dialog-template').hide();</xsl:attribute>
								<xsl:value-of select="localization:getGTPString($language, 'XSL_SYSTEMFEATURES_CANCEL')"/>
							</button>
						</xsl:with-param>
					</xsl:call-template>
				</div>

		</div>
		<!-- Dialog End -->
		<div id="accounts-template" style="display:none">
			<div class="clear">
				<p dojoAttachPoint="noItemLabelNode" class="empty-list-notice">
					<xsl:value-of select="localization:getGTPString($language, 'XSL_NO_ACCOUNT_DETAILS')"/>
				</p>
				<div dojoAttachPoint="itemsNode">
					<div dojoAttachPoint="containerNode"/>
				</div>
				<xsl:if test="$displaymode = 'edit' and  securitycheck:hasPermission(utils:getUserACL($rundata),'sy_account_maintain_access',utils:getUserEntities($rundata))">
				<button dojoType="dijit.form.Button" type="button" id="addCustomerButton" dojoAttachEvent="onClick: addItem " dojoAttachPoint="addButtonNode">
					<xsl:value-of select="localization:getGTPString($language, 'XSL_ENTITY_ADD_ACCOUNT')"/>
				</button>
				</xsl:if>
			</div>
		</div>
	</xsl:template>
	
	<!-- Account Type Options -->
  <xsl:template name="account_types">
   <xsl:choose>
    <xsl:when test="$displaymode='edit'">
    <option>
            <xsl:attribute name="value"></xsl:attribute>
    </option>
     <xsl:for-each select="account_types/bank_account_type">
     	<option>
     		<xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
     	    <xsl:value-of select="."></xsl:value-of>
     	</option>
     </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
        <xsl:value-of select="account_type"></xsl:value-of>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:template>
   <xsl:template name="account_product_types">
   <xsl:choose>
    <xsl:when test="$displaymode='edit'">
    <option>
            <xsl:attribute name="value"></xsl:attribute>
    </option>
     <xsl:for-each select="account_types/account_product_type">
     	<option>
     		<xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
     	    <xsl:value-of select="."></xsl:value-of>
     	</option>
     </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
        <xsl:value-of select="account_product_type"></xsl:value-of>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:template>
   <!-- Customer Account Type Options -->
 <xsl:template name="customer_account_types">
   <xsl:choose>
    <xsl:when test="$displaymode='edit'">
    <option>
            <xsl:attribute name="value"></xsl:attribute>
    </option>
     <xsl:for-each select="customer_account_types/customer_account_type">
     	<option>
     		<xsl:attribute name="value"><xsl:value-of select="."/></xsl:attribute>
     	    <xsl:value-of select="."></xsl:value-of>
     	</option>
     </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
        <xsl:value-of select="cust_account_type"></xsl:value-of>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:template> 
</xsl:stylesheet>